{"version":3,"file":"api.modern.js","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50,\n  headers: { \n    'Authorization': `Bearer ${GRAPHQL_API_TOKEN}`\n  }\n}\n\nconst link = new BatchHttpLink(linkConfig)\nconst previewLink = new BatchHttpLink({...linkConfig, headers:{...linkConfig.headers, 'X-Include-Drafts': true}})\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","async","input","init","queries","JSON","parse","body","toString","undefined","Array","isArray","map","op","operationName","join","response","t","Date","getTime","result","text","console","log","requestName","batchMax","batchInterval","headers","Authorization","link","BatchHttpLink","previewLink","_extends","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","SEOQuery","schema","gql","apiQuery","options","variables","preview","Error","setLink","batch","q","idx","vars","length","data","Promise","all","filter","errors","forEach","e","message","errorMessages","push","res","err"],"mappings":"4YAOA,MAAcA,EAAqB,oBAAXC,OAClBC,EAAuBC,QAAQC,IAAIF,sBAAwBC,QAAQC,IAAIC,gEACtDC,EAAGH,QAAQC,IAAIG,8BAoBhCC,EAAa,CACjBC,IAAKP,EACLQ,MAAOP,QAAQC,IAAIO,YApBAC,MAAOC,EAAoBC,KAE9C,MAAaC,EAAGD,EAAOE,KAAKC,MAAMH,EAAKI,KAAKC,iBAAcC,IAEtC,IADDL,EAAUM,MAAMC,QAAQP,GAAWA,EAAQQ,IAAKC,GAAgCA,EAAGC,eAAiB,CAACV,EAAQU,eAAiB,IAC/GC,KAAK,QACzBC,QAASjB,MAAMG,EAAOC,GAC7Bc,GAAG,IAAIC,MAAOC,UAErB,OACKH,EAAAA,CAAAA,EAAAA,EACH,CAAAf,aACE,MAAYmB,QAASJ,EAASK,OAE9B,OADAC,QAAQC,IAAI,cAAqB,QAAc,KAAAC,UAAoB,UAAWL,UAAUF,OACjFG,CACT,GAAC,OAM6CX,EAChDgB,SAAU,GACVC,cAAe,GACfC,QAAS,CACPC,cAA2B,UAAAjC,MAIzBkC,EAAO,IAAiBC,EAACjC,GACzBkC,EAAc,IAAiBD,EAAAE,EAAA,CAAA,EAAKnC,EAAU,CAAE8B,QAAY9B,EAAAA,CAAAA,EAAAA,EAAW8B,QAAS,CAAA,oBAAoB,OAEvFM,EAAG,IAAIC,EAAa,CACrCL,OACAM,MAAO,IAAmBC,EAC1BC,QAAShD,EACTiD,eAAgB,CACdC,MAAO,CACLC,YAAahD,QAAQC,IAAIgD,UAAY,cAAgB,WACrDC,YAAa,UAKNC,EAAYC,GAEbC,EADA,sBAAwBD,EAAS,sDAIhCE,EAAW7C,MAAOsC,EAAgDQ,KAE7E,MAAMC,UAAEA,EAASC,QAAEA,GAAU,GAASF,GAAW,GAEjD,GAAa,OAAVR,EACD,MAAUW,IAAAA,MAAM,iCAElB,IAAIvD,EACF,MAAUuD,IAAAA,MAAM,uCAElB,IAEEjB,EAAOkB,QAAQF,EAAUlB,EAAcF,GAEvC,MAAWuB,GAAI1C,MAAMC,QAAQ4B,GAASA,EAAQ,CAACA,IAAQ3B,IAAI,CAACyC,EAAGC,KAC7D,MAAUC,EAAG7C,MAAMC,QAAQqC,IAAcA,EAAUQ,OAASF,EAAK,EAAIN,EAAUM,GAAON,GAAa,GACnG,OAAaf,EAACM,MAAM,CAACA,MAAMc,EAAGL,UAAUO,GAAK,GAGrCE,QAAgBC,QAACC,IAAIP,KAEA,GAK/B,GAJAK,EAAKG,OAAO,EAAEC,YAAYA,GAAQC,QAAQ,EAAED,aAC1CA,EAAOjD,IAAImD,GAAKA,EAAEC,SAASF,QAASE,GAAYC,EAAcC,KAAKF,GAAQ,GAG1EC,EAAcT,OACf,MAAUN,IAAAA,MAAMe,EAAclD,KAAK,OAErC,IAAIK,EAAS,GAEb,OADAqC,EAAKK,QAASK,GAAQ/C,EAAaA,EAAAA,CAAAA,EAAAA,EAAc,MAAH+C,OAAG,EAAHA,EAAKV,OAGpDrC,CAEA,CAFA,MAAMgD,GACL,MAAMA,CACP"}