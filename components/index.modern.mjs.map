{"version":3,"file":"index.modern.mjs","sources":["../src/components/DatoSEO.tsx","../src/components/DatoMarkdown.tsx"],"sourcesContent":["import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  title = title ? title : globalSeo ? globalSeo?.siteName : 'Site title'\n  title = `${title} ${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`\n  description = description ? description : meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : 'Site description';\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\n\nconst DefaultDatoSEO = ({ site, url, title, description }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}\n\nexport { DefaultDatoSEO };\nexport default DatoSEO;","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n"],"names":["DatoSEO","seo","site","_ref$site","pathname","_ref","title","subtitle","description","noindex","_ref$noindex","parseDatoMetaTags","_ref$seo","globalSeo","favicon","favicons","map","_ref2","_extends","attributes","images","generateImages","meta","url","process","env","NEXT_PUBLIC_SITE_URL","React","createElement","NextSeo","siteName","titleSuffix","fallbackSeo","canonical","openGraph","locale","type","site_name","twitter","image","handle","twitterAccount","cardType","additionalLinkTags","nofollow","width","height","split","Array","isArray","tags","titleTag","metaTags","filter","m","tag","content","startsWith","t","forEach","property","name","scaleRatio","Math","round","DatoMarkdown","children","truncate","className","sentances","truncateMarkdown","limit","ellipsis","markdown","length","slice","join","truncateSentances","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","components","a","Link","scroll","href"],"mappings":"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"}