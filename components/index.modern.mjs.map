{"version":3,"file":"index.modern.mjs","sources":["../src/components/DatoSEO.tsx","../src/components/DatoMarkdown.tsx"],"sourcesContent":["import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  title = title ? title : globalSeo ? globalSeo?.siteName : 'Site title'\n  title = `${title} ${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`\n  description = description ? description : meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : 'Site description';\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\nexport default DatoSEO;\n\nexport const DefaultDatoSEO = ({ site, title, description }: { site: any, title?: string, description?: any }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      additionalLinkTags={favicons}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n"],"names":["DatoSEO","_ref","seo","site","_ref$site","pathname","title","subtitle","description","_ref$noindex","noindex","meta","parseDatoMetaTags","_ref$seo","globalSeo","favicon","favicons","map","_extends","attributes","images","generateImages","process","env","NEXT_PUBLIC_SITE_URL","React","createElement","NextSeo","siteName","titleSuffix","fallbackSeo","canonical","url","openGraph","locale","type","site_name","twitter","image","handle","twitterAccount","cardType","additionalLinkTags","nofollow","DefaultDatoSEO","_ref4","replace","undefined","DefaultSeo","twitterSite","twitterCard","width","height","split","metaTags","Array","isArray","tags","titleTag","filter","m","tag","content","startsWith","t","forEach","property","name","Math","round","scaleRatio","DatoMarkdown","children","truncate","className","sentances","truncateMarkdown","limit","ellipsis","markdown","length","slice","join","truncateSentances","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","components","a","Link","scroll","href","_ref2"],"mappings":"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"}