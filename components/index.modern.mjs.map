{"version":3,"file":"index.modern.mjs","sources":["../src/components/DatoSEO.tsx","../src/components/DatoMarkdown.tsx"],"sourcesContent":["import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  title = title ? title : globalSeo ? globalSeo?.siteName : 'Site title'\n  title = `${title} ${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`\n  description = description ? description : meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : 'Site description';\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\nexport default DatoSEO;\n\nexport const DefaultDatoSEO = ({ site, title, description }: { site: any, title?: string, description?: any }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n"],"names":["DatoSEO","seo","site","_ref$site","pathname","title","_ref","subtitle","description","_ref$noindex","noindex","meta","parseDatoMetaTags","_ref$seo","globalSeo","favicon","favicons","map","_ref2","attributes","generateImages","url","process","env","NEXT_PUBLIC_SITE_URL","React","createElement","NextSeo","siteName","titleSuffix","fallbackSeo","canonical","openGraph","images","locale","type","site_name","twitter","image","handle","twitterAccount","cardType","additionalLinkTags","nofollow","DefaultDatoSEO","_ref3","replace","undefined","DefaultSeo","twitterSite","twitterCard","width","height","split","_ref4","metaTags","Array","isArray","tags","titleTag","filter","m","tag","content","startsWith","_extends","t","forEach","property","name","scaleRatio","Math","round","DatoMarkdown","children","truncate","className","sentances","truncateMarkdown","limit","ellipsis","markdown","length","slice","join","truncateSentances","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","components","a","Link","scroll","href"],"mappings":"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"}