{"version":3,"file":"index.cjs","sources":["../src/components/DatoMarkdown.tsx","../src/components/DatoSEO.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n","import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  title = title ? title : globalSeo ? globalSeo?.siteName : 'Site title'\n  title = `${title} ${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`\n  description = description ? description : meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : 'Site description';\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\nexport default DatoSEO;\n\nexport const DefaultDatoSEO = ({ site, title, description }: { site: any, title?: string, description?: any }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      additionalLinkTags={favicons}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}"],"names":["children","truncate","className","sentances","_ref","truncateMarkdown","limit","ellipsis","markdown","split","length","slice","join","truncateSentances","React","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","content","components","a","Link","scroll","href","_ref2","seo","site","_ref$site","pathname","title","subtitle","description","_ref$noindex","noindex","meta","globalSeo","fallbackSeo","metaTags","Array","isArray","tags","titleTag","filter","m","tag","siteName","startsWith","map","t","forEach","attributes","property","name","image","width","url","Math","round","height","scaleRatio","parseDatoMetaTags","_ref$seo","favicon","favicons","_extends","images","generateImages","process","env","NEXT_PUBLIC_SITE_URL","createElement","NextSeo","titleSuffix","canonical","openGraph","locale","type","site_name","twitter","handle","twitterAccount","cardType","additionalLinkTags","nofollow","_ref4","replace","undefined","DefaultSeo","twitterSite","twitterCard"],"mappings":"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"}