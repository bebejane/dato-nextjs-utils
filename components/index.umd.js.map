{"version":3,"file":"index.umd.js","sources":["../src/components/DatoMarkdown.tsx","../src/components/DatoSEO.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n","import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  if (!title) {\n    if (globalSeo)\n      title = globalSeo.siteName\n    if (globalSeo?.titleSuffix || subtitle)\n      title = `${title}${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`;\n  }\n\n  if (!description)\n    description = meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : undefined;\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\nexport default DatoSEO;\n\nexport const DefaultDatoSEO = ({ site, title, description }: { site: any, title?: string, description?: any }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      additionalLinkTags={favicons}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}"],"names":["children","truncate","className","sentances","_ref","truncateMarkdown","limit","ellipsis","markdown","split","length","slice","join","truncateSentances","React","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","content","components","a","Link","scroll","href","_ref2","seo","site","_ref$site","pathname","title","subtitle","description","_ref$noindex","noindex","meta","_ref5","globalSeo","fallbackSeo","metaTags","Array","isArray","tags","titleTag","filter","m","tag","_extends","siteName","startsWith","map","t","forEach","attributes","property","name","image","width","url","Math","round","height","scaleRatio","parseDatoMetaTags","_ref$seo","favicon","favicons","images","generateImages","process","env","NEXT_PUBLIC_SITE_URL","titleSuffix","undefined","createElement","NextSeo","canonical","openGraph","locale","type","site_name","twitter","handle","twitterAccount","cardType","additionalLinkTags","nofollow","_ref3","_ref4","twitterSite","replace","DefaultSeo","twitterCard"],"mappings":"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"}