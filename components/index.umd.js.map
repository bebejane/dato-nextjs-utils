{"version":3,"file":"index.umd.js","sources":["../src/components/DatoMarkdown.tsx","../src/components/DatoSEO.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from 'remark-gfm'\nimport Link from \"next/link.js\";\nimport truncateMarkdown  from 'markdown-truncate'\nimport remarkBreaks from 'remark-breaks'\nimport type { UrlObject } from 'url';\n\ntype MarkdownProps = {\n  children?: React.ReactNode, \n  truncate?: number, \n  className?:string, \n  sentances?:number\n}\n\ntype AnchorProp = {\n  children: any[], \n  href: UrlObject \n}\n\nconst truncateSentances = (markdown : string, limit: number) : string => {\n  if(!markdown) return markdown\n  const sentances = markdown.split('.')\n  return sentances.length >= limit  ? sentances.slice(0,limit).join(' ') +  '...' : markdown\n}\n\nconst DatoMarkdown = ({ children , truncate, className, sentances } : MarkdownProps) => {\n  if(!children) \n    return null\n\n  const content: string = !truncate ? sentances ? truncateSentances(children as string, sentances) :  children : truncateMarkdown(children, {limit:truncate, ellipsis:true})\n  \n  return (\n    <ReactMarkdown \n      remarkPlugins={[gfm,remarkBreaks]} \n      className={className}\n      children={content}\n      //@ts-ignore\n      components={{\n        //@ts-ignore\n        a: ({ children, href } : AnchorProp) => <Link scroll={false} href={href}><a>{children[0]}</a></Link> \n      }}\n      \n     />\n  )\n} \n\nexport default DatoMarkdown\n\n","import React from 'react';\nimport { NextSeo, DefaultSeo } from 'next-seo';\n\nconst DatoSEO = ({ seo = {}, site = {}, pathname, title, subtitle, description, noindex = false }: any) => {\n\n  const meta = parseDatoMetaTags({ seo, site, pathname })\n  const { globalSeo, favicon } = site\n  const favicons = favicon ? favicon.map(({ attributes }) => { return { ...attributes } }) : [];\n  const images = generateImages(meta[\"og:image\"], meta[\"og:image:width\"], meta[\"og:image:height\"])\n  const url = `${process.env.NEXT_PUBLIC_SITE_URL}${pathname || ''}`\n\n  title = title ? title : globalSeo ? globalSeo?.siteName : 'Site title'\n  title = `${title} ${globalSeo?.titleSuffix ? ` ${globalSeo?.titleSuffix}` : ''}${subtitle ? ` ${subtitle}` : ''}`\n  description = description ? description : meta.description ? meta.description : globalSeo ? globalSeo?.fallbackSeo.description : 'Site description';\n\n  const twitterProps: any = {\n    title,\n    image: meta[\"og:image\"],\n    handle: globalSeo?.twitterAccount,\n    site: globalSeo?.twitterAccount,\n    cardType: 'summary_large_image',\n  }\n\n  return (\n    <NextSeo\n      title={title}\n      description={description}\n      canonical={url}\n      openGraph={{\n        url,\n        title,\n        description,\n        images,\n        locale: meta[\"og:locale\"],\n        type: meta[\"og:type\"],\n        site_name: meta[\"og:site_name\"],\n      }}\n      twitter={twitterProps}\n      additionalLinkTags={favicons}\n      noindex={noindex}\n      nofollow={noindex}\n    />\n  )\n}\nexport default DatoSEO;\n\nexport const DefaultDatoSEO = ({ site, title, description }: { site: any, title?: string, description?: any }) => {\n  const { globalSeo, favicon, globalSeo: { fallbackSeo } } = site\n  const twitterSite = globalSeo.twitterAccount ? `https://twitter.com/${globalSeo.twitterAccount.replace(\"@\", \"\")}` : undefined\n  return (\n    <DefaultSeo\n      title={title}\n      description={description}\n      openGraph={{\n        type: 'website',\n        locale: globalSeo.locale,\n        site_name: globalSeo.siteName,\n      }}\n      twitter={{\n        handle: globalSeo.twitterAccount,\n        site: twitterSite,\n        cardType: fallbackSeo.twitterCard,\n      }}\n    />\n  )\n}\n\nconst generateImages = (url, width, height): any => {\n  if (!url) return undefined\n  const baseURL = url.split(\"?\")[0]\n  const images = [{\n    url,\n    width,\n    height\n  }]\n  return images\n}\n\nconst parseDatoMetaTags = ({ seo, site, pathname }: any): any => {\n\n  if (!seo || !site) return []\n\n  const { globalSeo } = site || {};\n  const { fallbackSeo } = globalSeo || {};\n  const tags = Array.isArray(seo) ? seo : seo.tags;\n\n  let metaTags = tags || []\n  let titleTag = metaTags.filter(m => m.tag === \"title\")[0]\n\n  if (titleTag && globalSeo) {\n    if (pathname === \"/\")\n      titleTag = { ...titleTag, content: globalSeo.siteName }\n    else if (globalSeo && titleTag.content.startsWith(globalSeo.siteName))\n      titleTag = { ...titleTag, content: `${globalSeo.siteName} â€“ ${titleTag.content}` }\n  }\n\n  metaTags = metaTags.map(t => { return t.tag !== 'title' ? t : titleTag })\n\n  const meta = {}\n\n  metaTags.forEach(t => {\n    const prop = t.attributes ? t.attributes.property || t.attributes.name : t.tag;\n    const value = t.attributes ? t.attributes.content || t.attributes : t.content;\n    meta[prop] = value\n  })\n\n  if (!meta['og:image'] && fallbackSeo?.image) {\n    const width = 1000;\n    const scaleRatio = 1.0 - ((fallbackSeo.image.width - width) / fallbackSeo.image.width)\n    meta['og:image'] = `${fallbackSeo.image.url}?w=1000`\n    meta[\"og:image:width\"] = width\n    meta[\"og:image:height\"] = Math.round(fallbackSeo.image.height * scaleRatio)\n  }\n  return meta\n}"],"names":["children","truncate","className","sentances","_ref","truncateMarkdown","limit","ellipsis","markdown","split","length","slice","join","truncateSentances","React","ReactMarkdown","remarkPlugins","gfm","remarkBreaks","content","components","a","Link","scroll","href","_ref2","seo","site","_ref$site","pathname","title","subtitle","description","_ref$noindex","noindex","meta","_ref4","globalSeo","fallbackSeo","metaTags","Array","isArray","tags","titleTag","filter","m","tag","siteName","startsWith","_extends","map","t","forEach","attributes","property","name","image","scaleRatio","width","url","Math","round","height","parseDatoMetaTags","_ref$seo","favicon","favicons","generateImages","process","env","NEXT_PUBLIC_SITE_URL","createElement","NextSeo","titleSuffix","canonical","openGraph","images","locale","type","site_name","twitter","handle","twitterAccount","cardType","additionalLinkTags","nofollow","_ref3","replace","undefined","DefaultSeo","twitterSite","twitterCard"],"mappings":"ugCA0BqB,YAAGA,IAAAA,IAAAA,SAAWC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAAWC,EAASC,EAATD,UACtD,IAAIH,EACF,OAAO,KAET,MAAyBC,EAAsFI,EAAgB,QAACL,EAAU,CAACM,MAAML,EAAUM,UAAS,IAAhIJ,EAVZ,SAACK,EAAmBF,GAC5C,IAAIE,EAAU,OAAeA,EAC7B,IAAML,EAAYK,EAASC,MAAM,KACjC,OAAgBN,EAACO,QAAUJ,EAASH,EAAUQ,MAAM,EAAEL,GAAOM,KAAK,KAAQ,MAAQJ,CACpF,CAMkDK,CAAkBb,EAAoBG,GAAcH,eAEpG,OACEc,EAAAA,sBAACC,EAAa,QAAA,CACZC,cAAe,CAACC,EAAG,QAACC,EAAY,SAChChB,UAAWA,EACXF,SAAUmB,EAEVC,WAAY,CAEVC,EAAG,SAAGrB,gBAAc,OAAoBc,EAAAA,sBAACQ,EAAI,QAAA,CAACC,QAAQ,EAAOC,KAAzCC,EAAJD,mBAAyDV,EAAAA,QAAId,cAAAA,IAAAA,OAAvEA,SAAgF,IAAc,IAK5G,YC1CgB,YAAG0B,IAAAA,EAAAA,EAAAA,IAAUC,EAAAA,EAAAA,KAAAA,OAAI,IAAAC,EAAG,CAAA,EAAEA,EAAEC,EAAAA,EAAAA,SAAUC,EAAK1B,EAAL0B,MAAOC,IAAAA,SAAUC,EAAW5B,EAAX4B,YAAWC,EAAA7B,EAAE8B,QAAAA,cAAeD,EAEnFE,EAyEc,SAAHC,GAAMV,IAAAA,IAAAA,IAAKC,EAAAA,EAAAA,KAAME,EAAQO,EAARP,SAEtC,IAAKH,IAAQC,EAAM,MAAO,GAE1B,IAAQU,GAAcV,GAAQ,IAAtBU,UACAC,GAAgBD,GAAa,CAAE,GAA/BC,YAGIC,GAFCC,MAAMC,QAAQf,GAAOA,EAAMA,EAAIgB,OAErB,GACnBC,EAAWJ,EAASK,OAAO,SAAAC,GAAC,MAAc,UAATA,EAACC,GAAe,GAAE,GAEnDH,GAAYN,IACG,MAAbR,EACFc,EAAgBA,EAAAA,CAAAA,EAAAA,EAAUxB,CAAAA,QAASkB,EAAUU,WACtCV,GAAaM,EAASxB,QAAQ6B,WAAWX,EAAUU,YAC1DJ,EAAQM,EAAA,CAAA,EAAQN,EAAQ,CAAExB,QAAYkB,EAAUU,eAAcJ,EAASxB,YAG3EoB,EAAWA,EAASW,IAAI,SAAAC,GAAO,MAAiB,UAATA,EAACL,IAAkBK,EAAIR,CAAS,GAEvE,IAAUR,EAAG,CAAA,EAQb,GANAI,EAASa,QAAQ,SAAAD,GAGfhB,EAFagB,EAAEE,WAAaF,EAAEE,WAAWC,UAAYH,EAAEE,WAAWE,KAAOJ,EAAEL,KAC7DK,EAAEE,WAAaF,EAAEE,WAAWlC,SAAWgC,EAAEE,WAAaF,EAAEhC,OAExE,IAEKgB,EAAK,aAA0B,MAAXG,GAAAA,EAAakB,MAAO,CAC3C,IACgBC,EAAG,GAAQnB,EAAYkB,MAAME,MAD/B,KACgDpB,EAAYkB,MAAME,MAChFvB,EAAK,YAAiBG,EAAYkB,MAAMG,IAAG,UAC3CxB,EAAK,kBAHS,IAIdA,EAAK,mBAAqByB,KAAKC,MAAMvB,EAAYkB,MAAMM,OAASL,EACjE,CACD,OAAOtB,CACT,CA7Ge4B,CAAkB,CAAErC,SAFV,IAAAsC,EAAA,CAAE,EAAErC,EAEWA,KAAAA,EAAME,SAAAA,IACpCQ,EAAuBV,EAAvBU,UAAW4B,EAAYtC,EAAZsC,QACbC,EAAWD,EAAUA,EAAQf,IAAI,SAAAzB,GAAsB,cAAnB4B,WAA4C,GAAK,KA4DtE,SAACM,EAAKD,EAAOI,GAClC,GAAKH,EAOL,OANgBA,EAAIlD,MAAM,KACX,CAAC,CACdkD,IAAAA,EACAD,MAAAA,EACAI,OAAAA,GAGJ,CApEiBK,CAAehC,EAAK,YAAaA,EAAK,kBAAmBA,EAAK,oBACvEwB,EAASS,GAAAA,QAAQC,IAAIC,sBAAuBzC,GAAY,iBAc9D,OACEf,EAAAA,QAACyD,cAAAC,EAAAA,SACC1C,MAbJA,GADAA,EAAQA,IAAgBO,EAAYA,MAAAA,OAAAA,EAAAA,EAAWU,SAAW,eAC1C,KAAIV,MAAAA,GAAAA,EAAWoC,YAAW,KAAgB,MAATpC,OAAS,EAATA,EAAWoC,aAAgB,KAAK1C,EAAQ,IAAOA,EAAa,IAczGC,YAbJA,EAAcA,IAA4BG,EAAKH,YAAcG,EAAKH,YAAcK,EAAqB,MAATA,OAAS,EAATA,EAAWC,YAAYN,YAAc,oBAc7H0C,UAAWf,EACXgB,UAAW,CACThB,IAAAA,EACA7B,MAAAA,EACAE,YAAAA,EACA4C,OAAAA,EACAC,OAAQ1C,EAAK,aACb2C,KAAM3C,EAAK,WACX4C,UAAW5C,EAAK,iBAElB6C,QAtBsB,CACxBlD,MAAAA,EACA0B,MAAOrB,EAAK,YACZ8C,OAAQ5C,MAAAA,OAAAA,EAAAA,EAAW6C,eACnBvD,WAAMU,SAAAA,EAAW6C,eACjBC,SAAU,uBAkBRC,mBAAoBlB,EACpBhC,QAASA,EACTmD,SAAUnD,GAGhB,mBAG8B,SAAHoD,OAAU3D,EAAA2D,EAAJ3D,KAAMG,EAAKwD,EAALxD,MAAOE,IAAAA,YAC3BK,EAA0CV,EAAnDU,UAAiCC,EAAkBX,EAA/BU,UAAaC,cACrBD,EAAU6C,eAAc,uBAA0B7C,EAAU6C,eAAeK,QAAQ,IAAK,SAAQC,eACpH,OACE1E,UAAAyD,cAACkB,EAAAA,WAAU,CACT3D,MAAOA,EACPE,YAAaA,EACb2C,UAAW,CACTG,KAAM,UACND,OAAQxC,EAAUwC,OAClBE,UAAW1C,EAAUU,UAEvBiC,QAAS,CACPC,OAAQ5C,EAAU6C,eAClBvD,KAAM+D,EACNP,SAAU7C,EAAYqD,cAI9B"}