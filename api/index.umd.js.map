{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean, apiToken?: string}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken:string = GRAPHQL_API_ENDPOINT) => {\n  return new BatchHttpLink({\n    ...linkConfig, \n    headers:{\n      'Authorization': `Bearer ${apiToken}`,\n      'X-Include-Drafts': preview,\n      'X-Exclude-Invalid': true\n    }\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_ENDPOINT)\nconst previewLink = createLink(true, GRAPHQL_API_ENDPOINT)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false, apiToken} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","operations","Array","isArray","map","op","operationName","join","then","response","t","Date","getTime","_extends","text","Promise","resolve","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","BatchHttpLink","headers","Authorization","previewLink","client","ApolloClient","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","schema","apiQuery","options","variables","_ref","_ref$preview","Error","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","_ref2","errors","forEach","_ref3","message","push","res","_catch","err","error"],"mappings":"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"}