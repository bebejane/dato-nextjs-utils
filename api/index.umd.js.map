{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken:string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n  \n  if(preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig, \n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = { \n  variables?: any | any[], \n  preview?: boolean, \n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false, apiToken} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n"],"names":["GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","result","console","log","requestName","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","linkConfig","link","cache","InMemoryCache","ssrMode","isServer","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","schema","apiQuery","options","variables","_ref","_ref$preview","client","setLink","previewLink","batch","q","idx","vars","length","resolve","all","data","errorMessages","filter","_ref2","errors","forEach","_ref3","message","push","Error","res","err","error"],"mappings":"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"}