{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","text","then","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","apiQuery","options","variables","_ref","_ref$preview","client","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","push","Error","res","_catch","err","error"],"mappings":"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"}