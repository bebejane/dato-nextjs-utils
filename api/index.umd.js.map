{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string, excludeInvalid: boolean = true) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': excludeInvalid ? 'true' : 'false'\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n  excludeInvalid?: boolean\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken, excludeInvalid = true } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken, excludeInvalid) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const checkIsPaganationQuery = (doc: TypedDocumentNode): boolean => {\n  //@ts-ignore\n  const operation = doc.definitions.find((d) => d.kind === 'OperationDefinition')\n\n  if (!operation)\n    throw new Error('Not a pagable query. Missing operation definition')\n\n  const { selectionSet, variableDefinitions } = operation as any\n\n  if (!selectionSet.selections.find((s) => s.alias?.value === 'pagination'))\n    throw new Error('Not a pagable query. Missing pagination field')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'first'))\n    throw new Error('Not a pagable query. Missing $first variable')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'skip'))\n    throw new Error('Not a pagable query. Missing $skip variable')\n\n  return true\n}\n\nexport const apiQueryAll = async (doc: TypedDocumentNode, opt: ApiQueryOptions = {}, options = { batchSize: 50, delay: 100 }): Promise<any> => {\n\n  checkIsPaganationQuery(doc)\n\n  const results = {}\n  let size = 100;\n  let skip = 0;\n\n  const res = await apiQuery(doc, { variables: { ...opt.variables, first: size, skip } });\n\n  if (res.pagination?.count === undefined)\n    throw new Error('Not a pagable query')\n\n  const { count } = res.pagination\n\n  const mergeProps = (res) => {\n    const props = Object.keys(res);\n\n    for (let i = 0; i < props.length; i++) {\n      const k = props[i]\n      const el = res[props[i]];\n      if (Array.isArray(el)) {\n        results[k] = !results[k] ? el : results[k].concat(el)\n      } else\n        results[k] = el;\n    }\n  }\n\n  const isRejected = (input: PromiseSettledResult<unknown>): input is PromiseRejectedResult =>\n    input.status === 'rejected'\n\n  const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>\n    input.status === 'fulfilled'\n\n  mergeProps(res)\n\n  let reqs = []\n  for (let skip = size; skip < count; skip += size) {\n    if (reqs.length < options.batchSize && skip + size < count)\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n    else {\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n\n      const data = await Promise.allSettled(reqs)\n      const error = data.find(isRejected)?.reason\n\n      if (error)\n        throw new Error(error)\n\n      for (let x = 0; x < data.length; x++) {\n        //@ts-ignore\n        mergeProps(data[x].value);\n      }\n      await new Promise(r => setTimeout(r, options.delay))\n      reqs = []\n    }\n  }\n  return results\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["state","value","pact","s","_Pact","o","_settle","bind","v","then","observer","isServer","window","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","_ref","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","operations","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","console","log","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","excludeInvalid","headers","Authorization","BatchHttpLink","link","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","apiQuery","options","variables","_ref2","_ref2$preview","_ref2$excludeInvalid","Error","resolve","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","_ref3","errors","forEach","_ref4","message","push","res","_catch","err","checkIsPaganationQuery","doc","definitions","find","d","kind","operation","variableDefinitions","selectionSet","selections","_s$alias","alias","variable","name","model","id","gql","opt","batchSize","delay","results","size","first","skip","_res$pagination","pagination","count","mergeProps","props","Object","keys","i","k","el","concat","isRejected","status","reqs","allSettled","error","_data$find","reason","x","r","setTimeout","_temp","_result2"],"mappings":"+pBAkDS,aAAkBA,EAAAC,GACvB,IAAAC,EAAGC,EAAU,iBACNC,EAAA,CACR,IAACH,EAAAE,EASF,YADAF,EAAKI,EAAMC,EAAAC,KAAA,KAAeL,EAAAF,IAP3B,EAAAA,IAEKA,EAAOC,EAAUE,GAGvBF,EAAaA,EAAAO,CAKT,CACE,GAAAP,GAAAA,EAAAQ,KAED,YADCR,EAAAQ,KAAAH,EAAAC,KAAkB,KAAAL,EAAAF,GAAAM,EAAAC,KAAA,KAAAL,EAAA,IAGtBA,EAACC,EAAAH,EAUGE,EAACM,EAAMP,EAEX,IAAAS,EAAiBR,EAASG,EAEtBK,GACFA,EAAAR,EAGA,EAjFJ,IAAcS,EAAqB,oBAAXC,OAJfR,0BAET,SAAcA,IAAA,CAwCZ,OAtCFA,YAAiBK,KAAO,SAAMI,EAAgBC,GAC9C,IAA0BC,EAAA,IAAAX,EACHJ,EAAAgB,KAAAb,EACvB,GAAMH,EAAmB,CACzB,IAA4BiB,EAAA,EAAAjB,EAAUa,EAA2BC,EAE3D,GAAAG,EAAA,CAEJ,IACAX,IAAmB,EAAAW,EAAUD,KAAKR,GAGlC,CAFM,MAAAU,GACAZ,EAAAS,EAAW,EAAMG,EACvB,CAEA,OAAOH,CACL,CACA,OACEC,YAEAA,KAAAX,EAAA,oBAEHJ,EAAAkB,EAAAX,EACF,EAAAW,EAAAhB,EAEDG,IAAmB,EAAAO,EAAAA,EAAAZ,GAAAA,GACQa,EACzBR,EAAOS,EAAQ,EAAeD,EAAAb,IAE9BK,EAAAS,EAAiB,EAAAd,GAGb,MAAAiB,GACJZ,IAAgB,EAAAY,KAKhBH,CAAA,EACAX,CACE,IAgDA,SAAqBgB,EAAAC,GACnB,OAAAA,gBAAyC,EAAfA,EAAUlB,CACpC,KAxFAmB,EAAuBC,QAAQC,IAAIF,sBAAwBC,QAAQC,IAAIC,kCAAgC,8BACtFC,EAAGH,QAAQC,IAAIG,+BAAiCJ,QAAQC,IAAIE,kBAC7EE,EAAoG,OAA9EL,EAAmCA,OAAnCA,EAAAA,QAAQC,IAAIK,qBAAuBN,EAAAA,QAAQC,IAAIM,iCAA+BC,EAAI,OACxGC,IAAyBT,QAAQC,IAAIS,wBAAgE,SAAvCV,QAAQC,IAAIS,uBAoBhEC,EAAG,CACjBC,IAAKb,EACLc,MAAmC,SAA5Bb,QAAQC,IAAIa,YApBH,SAAUC,EAAoBC,GAAyC,IAEvF,IAAMC,EAAUD,EAAOE,KAAKC,MAAMH,EAAKI,KAAKC,iBAAcC,EAEpDC,EAAiBC,IADJP,EAAUQ,MAAMC,QAAQT,GAAWA,EAAQU,IAAI,SAACC,GAAkCA,OAAAA,EAAGC,aAAa,GAAI,CAACZ,EAAQY,eAAiB,IACjHC,KAAK,MAAO,uBACvBjB,MAAME,EAAOC,IAA9Be,KAAAA,SAAAA,GACN,IAAOC,GAAG,IAAIC,MAAOC,UAErB,OAAAC,EAAA,CAAA,EACKJ,EAAQ,CACLK,KAAI,WAAA,IACaL,OAAAA,QAAAA,QAAAA,EAASK,QAAMlD,KAAA,SAA9BM,GAEN,OADA6C,QAAQC,IAAI,cAAqB,QAAcf,KAAAA,EAAoB,OAAA,IAAQU,MAAGC,UAAYF,GAAC,MAC9ExC,CAAA,EACd,CAAA,MAAAG,GAAA,OAAA4C,QAAAC,OAAA7C,EAAA,CAAA,GACF,EAGH,CAFC,MAEDA,GAAA,OAAA4C,QAAAC,OAAA7C,EAAA,CAAA,OAE6D2B,EAC3DmB,SAAU,GACVC,cAAe,IAGDC,EAAG,SAACC,EAA0BC,EAAkBC,QAAzB,IAAnBF,IAAAA,GAAmB,QAAyB,IAAAE,IAAAA,GAA0B,GACxF,IAAMC,EAAU,CACdC,cAAe,UAAYH,EAC3B,oBAAqBC,EAAiB,OAAS,SAUjD,OAPsBF,GAAWnC,KAE/BsC,EAAQ,qBAAsB,GAE5B1C,IACF0C,EAAQ,iBAAmB1C,GAElB4C,IAAAA,EAAAA,mBACNtC,EAAU,CACboC,QAAAA,IAEJ,EAEMG,EAAOP,GAAW,EAAOxC,GACzBgD,EAAcR,GAAW,EAAMxC,GAElBiD,EAAG,IAAgBC,EAAAA,aAAC,CACrCH,KAAAA,EACAI,MAAO,IAAmBC,EAAAA,cAC1BC,QAASpE,EACTqE,eAAgB,CACdC,MAAO,CACLC,YAAa3D,QAAQC,IAAI2D,UAAY,cAAgB,WACrDC,YAAa,UAaNC,EAAAA,SAAkBJ,EAAgDK,GAA2C,IAExH,IAAwEA,EAAAA,GAAW,CAAE,EAA7EC,EAASC,EAATD,UAASE,EAAAD,EAAErB,QAAAA,OAAU,IAAAsB,GAAOrB,EAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,eAAAA,OAAiB,IAAAqB,GAE/DA,EAAA,GAAc,OAAVT,EACF,MAAM,IAASU,MAAC,iCAElB,IAAKjE,IAAsB0C,EACzB,MAAUuB,IAAAA,MAAM,uCAAsC,OAEpD7B,QAAA8B,gCAAA,WAEFjB,EAAOkB,QAAQzB,EAAWF,EAAWC,EAASC,EAAUC,GAAkBF,EAAUO,EAAcD,GAElG,IAAMqB,GAAS9C,MAAMC,QAAQgC,GAASA,EAAQ,CAACA,IAAQ/B,IAAI,SAAC6C,EAAGC,GAC7D,IAAMC,EAAOjD,MAAMC,QAAQsC,IAAcA,EAAUW,OAASF,EAAM,EAAIT,EAAUS,GAAOT,GAAa,CAAA,EACpG,OAAaZ,EAACM,MAAM,CAAEA,MAAOc,EAAGR,UAAWU,GAC7C,GAAE,OAEiBnC,QAAAA,QAAAA,QAAQqC,IAAIL,IAAMrF,KAAA,SAA/B2F,GAEN,IAAMC,EAA0B,GAKhC,GAJAD,EAAKE,OAAO,SAAAC,GAAS,OAAAA,EAANC,MAAmB,GAAEC,QAAQ,SAAAC,GAASA,EAANF,OACtCtD,IAAI,SAAAhC,GAAKA,OAAAA,EAAEyF,OAAO,GAAEF,QAAQ,SAACE,GAAYN,OAAAA,EAAcO,KAAKD,EAAQ,EAC7E,GAEIN,EAAcH,OAChB,MAAUP,IAAAA,MAAMU,EAAchD,KAAK,OAErC,IAAUtC,EAAG,GAEb,OADAqF,EAAKK,QAAQ,SAACI,GAAG,OAAW9F,EAAA2C,EAAA,CAAA,EAAQ3C,EAAW8F,MAAAA,OAAAA,EAAAA,EAAKT,KAAM,GAC7CrF,CAAA,EAEd,6DAvBG+F,CAAA,EAuBH,SAAQC,GACP,MACDA,CAAA,GAGH,CAFC,MAED7F,GAAA,OAAA4C,QAAAC,OAAA7C,EAAA,CAAA,EAAa8F,EAAyB,SAACC,GAErC,MAAkBA,EAAIC,YAAYC,KAAK,SAACC,GAAC,MAAgB,wBAAVA,EAACC,IAA8B,GAE9E,IAAKC,EACH,MAAU3B,IAAAA,MAAM,qDAElB,IAAsB4B,EAAwBD,EAAxBC,oBAEtB,IAF8CD,EAAtCE,aAEUC,WAAWN,KAAK,SAAChH,GAAM,IAAAuH,EAAA,MAAmB,gBAAZ,OAAPA,EAAAvH,EAAEwH,YAAK,EAAPD,EAASzH,MAAsB,GACtE,MAAM,UAAU,iDAClB,IAAKsH,EAAoBJ,KAAK,SAAC3G,GAAMA,MAA0B,UAA1BA,EAAEoH,SAASC,KAAK5H,KAAiB,GACpE,MAAM,IAAS0F,MAAC,gDAClB,IAAK4B,EAAoBJ,KAAK,SAAC3G,GAAMA,MAA0B,SAA1BA,EAAEoH,SAASC,KAAK5H,KAAgB,GACnE,MAAM,IAAS0F,MAAC,+CAElB,OACF,CAAA,aA8DwB,SAACmC,EAAeC,GAWtC,OAAUC,MATDF,2BAAAA,EAASC,KAAAA,EAA+BA,0BAAAA,WAAa,IAAE,qHAUlE,sCAxEkCd,EAAwBgB,EAA2B3C,QAA3B,IAAA2C,IAAAA,EAAuB,CAAE,QAAE3C,IAAAA,IAAAA,EAAU,CAAE4C,UAAW,GAAIC,MAAO,MAAuB,IAE5InB,EAAuBC,GAEvB,IAAMmB,EAAU,CAAE,EACdC,EAAO,IACE,OAEKhD,QAAAA,QAAAA,EAAS4B,EAAK,CAAE1B,UAAS7B,EAAA,CAAA,EAAOuE,EAAI1C,UAAS,CAAE+C,MAAOD,EAAME,KAFnE,OAE4E9H,KAAA,SAAjFoG,GAAG,IAAA2B,EAET,QAA8B3F,KAAZ,OAAd2F,EAAA3B,EAAI4B,iBAAU,EAAdD,EAAgBE,OAClB,MAAU/C,IAAAA,MAAM,uBAElB,IAAQ+C,EAAU7B,EAAI4B,WAAdC,MAEFC,EAAa,SAAC9B,GAGlB,IAFA,IAAW+B,EAAGC,OAAOC,KAAKjC,GAEjBkC,EAAI,EAAGA,EAAIH,EAAM1C,OAAQ6C,IAAK,CACrC,IAAMC,EAAIJ,EAAMG,GACVE,EAAKpC,EAAI+B,EAAMG,IAEnBX,EAAQY,GADNhG,MAAMC,QAAQgG,IACFb,EAAQY,GAAUZ,EAAQY,GAAGE,OAAOD,GAErCA,CAChB,CACH,EAEgBE,EAAG,SAAC7G,GAClBA,MAAiB,aAAjBA,EAAM8G,MAAqB,EAK7BT,EAAW9B,GAEX,IAAQwC,EAAG,GACFd,EAAOF,EAAME,4pBAAAA,CAAAA,WAAAA,OAAAA,EAAOG,CAAK,EAAEH,WAAAA,SAAAA,GAAQF,EAAM,EAAA,WAAA,OAAA,WAAA,KAC5CgB,EAAKnD,OAASZ,EAAQ4C,WAAaK,EAAOF,EAAOK,GAG6B,OAAhFW,EAAKzC,KAAKvB,EAAS4B,EAAK,CAAE1B,UAAgB0C,EAAAA,CAAAA,EAAAA,EAAI1C,UAAW+C,CAAAA,MAAOD,EAAME,KAAAA,OAAUzE,QAAA8B,QAE7D9B,QAAQwF,WAAWD,IAAhCjD,KAAAA,SAAAA,SACAmD,EAA6B,OAArBnD,EAAAA,EAAKe,KAAKgC,SAAW,EAArBK,EAAuBC,OAErC,GAAIF,EACF,MAAM,IAAS5D,MAAC4D,GAElB,IAAK,IAAIG,EAAI,EAAGA,EAAItD,EAAKF,OAAQwD,IAE/Bf,EAAWvC,EAAKsD,GAAGzJ,OACpB,OACK6D,QAAA8B,QAAA,IAAW9B,QAAC,SAAA6F,GAAKC,OAAAA,WAAWD,EAAGrE,EAAQ6C,MAAM,oBACnDkB,EAAO,EAAE,EAAA,GAfTA,EAAKzC,KAAKvB,EAAS4B,EAAK,CAAE1B,UAAS7B,EAAA,CAAA,EAAOuE,EAAI1C,UAAS,CAAE+C,MAAOD,EAAME,KAAAA,MAe7D,CAjBqC,EAmBjD,GAAA,OAAAsB,GAAAA,EAAApJ,KAAAoJ,EAAApJ,KAAA,SAAAqJ,GAAA,OACM1B,CAAO,GAAPA,CAAO,EACf,CAAA,MAAAlH,GAAA,OAAA4C,QAAAC,OAAA7C,EAAA,CAAA,oDAgBwB,SAAC6F,GAExB,OADAnD,QAAQ2F,MAAMxC,GACJA,EAACJ,SAAWI,CACxB"}