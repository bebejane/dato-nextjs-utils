{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? 'main'\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n    client.headers\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","DATOCMS_ENVIRONMENT","_process$env$DATOCMS_","linkConfig","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","requestName","Date","t","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","GRAPHQL_ENVIRONMENT","BatchHttpLink","_extends","previewLink","client","ApolloClient","link","cache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","options","variables","_ref$preview","_ref","Error","setLink","batch","q","idx","length","vars","Promise","resolve","all","data","errorMessages","filter","errors","forEach","_ref3","e","message","push","res","err","reject","error"],"mappings":"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"}