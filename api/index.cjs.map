{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  console.log(process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, process.env.GRAPHQL_API_TOKEN);\n\n  //const token = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\n  if (!process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN && !process.env.GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","operations","queries","Array","isArray","map","op","operationName","join","then","response","getTime","text","Promise","resolve","result","console","log","requestName","t","e","reject","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","BatchHttpLink","_extends","linkConfig","previewLink","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","apiQuery","options","variables","_ref$preview","_ref","client","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","push","res","_catch","err","error"],"mappings":"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"}