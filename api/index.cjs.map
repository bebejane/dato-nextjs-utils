{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      Object.keys(vars).forEach(k => vars[k] === undefined && delete vars[k])\n      console.log(vars);\n\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","text","then","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","apiQuery","options","variables","_ref$preview","_ref","Error","setLink","q","idx","vars","length","Object","keys","forEach","k","all","batch","data","filter","_ref2","errors","message","errorMessages","push","res","_catch","err","error"],"mappings":"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"}