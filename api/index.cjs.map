{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  headers['X-Include-Drafts'] = preview ? true : GRAPHQL_INCLUDE_DRAFTS\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n    client.headers\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","DATOCMS_ENVIRONMENT","_process$env$DATOCMS_","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","result","console","log","requestName","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","GRAPHQL_ENVIRONMENT","BatchHttpLink","link","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","options","variables","_ref","_ref$preview","Error","setLink","q","idx","vars","length","Promise","resolve","all","batch","data","errorMessages","filter","errors","_ref2","forEach","_ref3","e","message","push","res","err","error"],"mappings":"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"}