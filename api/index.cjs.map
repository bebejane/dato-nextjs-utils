{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n    client.headers\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","requestName","queries","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","Promise","resolve","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","link","previewLink","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","options","variables","_ref$preview","_ref","Error","client","setLink","batch","q","idx","length","vars","all","data","errorMessages","filter","errors","forEach","_ref3","message","push","res","err","error"],"mappings":"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"}