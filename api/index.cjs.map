{"version":3,"file":"index.cjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","operations","queries","Array","isArray","map","op","operationName","join","then","response","Date","getTime","text","result","console","log","requestName","t","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","BatchHttpLink","_extends","link","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","model","id","gql","options","variables","_ref$preview","Error","resolve","setLink","previewLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","push","res","_catch","err","error"],"mappings":"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"}