{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50,\n  headers: { \n    'Authorization': `Bearer ${GRAPHQL_API_TOKEN}`,\n    'X-Exclude-Invalid': true,\n  }\n}\n\nconst link = new BatchHttpLink(linkConfig)\nconst previewLink = new BatchHttpLink({...linkConfig, headers:{...linkConfig.headers, 'X-Include-Drafts' : true}})\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n"],"names":["window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","then","response","t","Date","getTime","text","result","console","log","e","Promise","reject","batchMax","batchInterval","headers","Authorization","link","BatchHttpLink","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","isServer","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","SEOQuery","schema","gql","apiQuery","options","_ref","variables","preview","_ref$preview","Error","resolve","setLink","batch","q","idx","length","vars","all","data","filter","_ref2","errors","forEach","_ref3","message","push","errorMessages","res","_catch","err","datoError","error"],"mappings":"4YAOA,MAAmC,oBAALA,SACDC,QAAQC,IAAIC,sBAAwBF,QAAQC,IAAIE,gEACtDC,EAAGJ,QAAQC,IAAII,8BAoBhCC,EAAa,CACjBC,IAAKL,EACLM,MAAmC,SAA5BR,QAAQC,IAAIQ,YApBfC,SAAsBC,EAAoBC,GAAkB,IAEhE,IAAMC,EAAUD,EAAOE,KAAKC,MAAMH,EAAKI,KAAKC,iBAAcC,EAEzCC,EAAA,IADEN,EAAUO,MAAMC,QAAQR,GAAWA,EAAQS,IAAI,SAACC,GAA2B,OAAOA,EAACC,aAAa,GAAI,CAACX,EAAQW,eAAiB,IAC/GC,KAAK,MAAO,uBACvBjB,MAAMG,EAAOC,IAAKc,KAAA,SAAnCC,GACN,IAAOC,GAAG,IAAIC,MAAOC,UAErB,YACKH,EAAQ,CACLI,KAAI,WAAA,2BACaJ,EAASI,sBAAxBC,GAEN,OADAC,QAAQC,IAAI,cAAqB,aAAcf,EAAW,OAAS,IAAIU,MAAOC,UAAUF,GAAM,MACvFI,CAAM,EACd,CAAA,MAAAG,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,GACF,GACF,yCAI4DjB,EAC3DoB,SAAU,GACVC,cAAe,GACfC,QAAS,CACPC,cAAe,UAAYrC,EAC3B,qBAAqB,IAInBsC,EAAO,IAAIC,EAAcrC,GACzBsC,EAAc,MAAsBtC,EAAAA,GAAAA,EAAYkC,CAAAA,aAAYlC,EAAWkC,QAAO,CAAE,oBAAqB,OAExFK,EAAG,IAAgBC,EAAC,CACrCJ,KAAAA,EACAK,MAAO,IAAmBC,EAC1BC,QAASC,EACTC,eAAgB,CACdC,MAAO,CACLC,YAAarD,QAAQC,IAAIqD,UAAY,cAAgB,WACrDC,YAAa,UAKNC,EAAW,SAACC,GAEvB,OAAOC,EADG,sBAAwBD,EAAS,qDAE7C,IAEaE,SAAkBP,EAAgDQ,GAA0B,IAEvG,IAAAC,EAAsCD,GAAW,CAAE,EAA3CE,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,QAAAA,OAAO,IAAAC,GAE1BA,EAAA,GAAa,OAAVZ,EACD,UAAea,MAAC,iCAElB,IAAI7D,EACF,MAAU6D,IAAAA,MAAM,uCAAsC,OAAA7B,QAAA8B,gCAAA,WAItDrB,EAAOsB,QAAQJ,EAAUnB,EAAcF,GAEvC,IAAW0B,GAAIhD,MAAMC,QAAQ+B,GAASA,EAAQ,CAACA,IAAQ9B,IAAI,SAAC+C,EAAGC,GAC7D,MAAalD,MAAMC,QAAQyC,IAAcA,EAAUS,OAASD,EAAK,EAAIR,EAAUQ,GAAOR,GAAa,GACnG,OAAOjB,EAAOO,MAAM,CAACA,MAAMiB,EAAGP,UAAUU,GAC1C,GAAE,OAAApC,QAAA8B,QAEiB9B,QAAQqC,IAAIL,IAAzBM,KAAAA,SAAAA,GAEN,MAA+B,GAK/B,GAJAA,EAAKC,OAAO,SAAAC,GAAcC,OAAND,EAANC,MAAkB,GAAEC,QAAQ,SAAAC,KAAEF,OACnCvD,IAAI,SAAAa,GAAC,SAAM6C,OAAO,GAAEF,QAAQ,SAACE,GAAO,SAAmBC,KAAKD,EAAQ,EAC7E,GAEGE,EAAcX,OACf,UAAeN,MAACiB,EAAczD,KAAK,OAErC,IAAIO,EAAS,GAEb,OADA0C,EAAKI,QAAQ,SAACK,GAAQnD,OAAAA,OAAaA,EAAWmD,MAAAA,OAAAA,EAAAA,EAAKT,KAAK,GAC3C1C,CAAA,EAEd,6DAzBuDoD,CAAA,EAyBvD,SAAMC,GACL,MAAMA,CACP,GAGH,CAFC,MAEDlD,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAAsBmD,EAAG,SAACD,GAExB,OADApD,QAAQsD,MAAMF,GACPA,EAAIL,SAAWK,CACxB"}