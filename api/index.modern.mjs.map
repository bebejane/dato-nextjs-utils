{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50,\n  headers: { \n    'Authorization': `Bearer ${GRAPHQL_API_TOKEN}`,\n    'X-Exclude-Invalid': true,\n  }\n}\n\nconst link = new BatchHttpLink(linkConfig)\nconst previewLink = new BatchHttpLink({...linkConfig, headers:{...linkConfig.headers, 'X-Include-Drafts' : true}})\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}"],"names":["isServer","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","then","response","t","Date","getTime","_extends","text","result","console","log","e","reject","batchMax","batchInterval","headers","Authorization","link","BatchHttpLink","linkConfig","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","SEOQuery","schema","gql","apiQuery","options","variables","preview","_ref$preview","Error","setLink","batch","q","idx","vars","length","all","data","filter","errors","forEach","_ref3","message","errorMessages","push","res","_catch","err"],"mappings":"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"}