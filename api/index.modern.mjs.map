{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n\n  //if (!process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN && !process.env.GRAPHQL_API_TOKEN && !apiToken)\n  //throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","Date","t","e","Promise","reject","batchMax","batchInterval","preview","apiToken","headers","Authorization","createLink","previewLink","client","ApolloClient","link","cache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","apiQuery","options","variables","_ref$preview","_ref","Error","resolve","setLink","q","idx","vars","length","all","batch","data","errorMessages","filter","_ref2","errors","forEach","message","push","res","_extends","_catch","err","SEOQuery","model","id","gql","datoError","error"],"mappings":"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"}