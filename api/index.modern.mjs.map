{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n  console.log(options);\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","requestName","Date","t","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","link","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","apiQuery","options","variables","_ref","_ref$preview","Error","Promise","resolve","setLink","previewLink","batch","q","idx","length","vars","all","data","errorMessages","filter","errors","_ref2","forEach","_ref3","e","message","push","res","_catch","err","reject","SEOQuery","model","id","gql","datoError","error"],"mappings":"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"}