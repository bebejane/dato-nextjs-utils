{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","text","then","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","model","context","apiQuery","options","variables","_ref","_ref$preview","client","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","Error","res","_catch","err","props","_extends","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","withRevalidate","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"8bAOA,ICPAA,EDOMC,EAA6B,oBAAXC,OACEC,EAAGC,QAAQC,IAAIF,sBAAwBC,QAAQC,IAAIC,kCAAiE,8BACvHC,EAAGH,QAAQC,IAAIG,8BAoBtBC,EAAG,CACjBC,IAAKP,EACLQ,MAAmC,SAA5BP,QAAQC,IAAIO,qBApBOC,EAAoBC,OAE9C,IAAaC,EAAGD,EAAOE,KAAKC,MAAMH,EAAKI,KAAKC,iBAAcC,EAEpDC,MADaN,EAAUO,MAAMC,QAAQR,GAAWA,EAAQS,IAAI,SAACC,GAAkCA,OAAAA,EAAGC,aAAa,GAAI,CAACX,EAAQW,eAAiB,IACjHC,KAAK,MAAO,OAAAC,QAAAC,QACvBlB,MAAME,EAAOC,IAA9BgB,KAAAA,SAAAA,GACN,IAAMC,GAAI,IAAIC,MAAOC,UAErB,YACKH,EAAQ,CACLI,KAAI,WAAA,IAAA,OAAAN,QAAAC,QACaC,EAASI,QAAMC,KAAA,SAA9BC,GAEN,OADAC,QAAQC,IAAI,cAAqB,QAAcjB,KAAAA,SAAoB,IAAIW,MAAOC,UAAYF,GAAM,MACnFK,CAAA,EAEhB,CADE,MACFG,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,GAAA,EAGH,CAFC,MAEDA,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,OAE6DnB,EAC3DqB,SAAU,GACVC,cAAe,IAGDC,EAAG,SAACC,EAA0BC,QAA1BD,IAAAA,IAAAA,GAAmB,QAAO,IAAAC,IAAAA,EAAmBtC,GAC/D,IAAMuC,EAAU,CACdC,cAA2BF,UAAAA,EAC3B,qBAAqB,GAMvB,OAHID,IACFE,EAAQ,qBAAsB,GAErBE,IAAAA,OACNvC,EAAU,CACbqC,QAAAA,IAEJ,EAEMG,EAAON,GAAW,EAAOpC,GACd2C,EAAGP,GAAW,EAAMpC,KAEf,MAAiB,CACrC0C,KAAAA,EACAE,MAAO,IAAIC,EACXC,QAASpD,EACTqD,eAAgB,CACdC,MAAO,CACLC,YAAapD,QAAQC,IAAIoD,UAAY,cAAgB,WACrDC,YAAa,UCxDL,SAAyBC,EAACC,EAAUC,GAEhD,IDuGsCC,ECvGtBC,EAAWC,SAAS5D,QAAQC,IAAI4D,iBACnClD,EAAwB,CAACmD,GAStC,OAPIN,EAAIL,OACNxC,EAAQoD,KAAKP,EAAIL,OACfK,EAAI7C,SACNA,EAAQoD,KAAKC,MAAMrD,EAAS6C,EAAI7C,SAC9B6C,EAAIS,KACNtD,EAAQoD,KD0GAG,EATDC,2BCjGeX,EAAIS,IAAIE,YD+FMT,EC/FCF,EAAIS,IAAIP,IDiG3B,0BAA6BA,EAAa,SAAA,IAQ5D,gICvGYU,GAAO,IACCC,OAAAA,QAAAA,QDsDXA,SAAkBlB,EAAgDmB,GAA2C,IAExH,IAAiDA,EAAAA,GAAW,CAAA,EAApDC,EAASC,EAATD,UAAW/B,EAAAA,EAAAA,QAAAA,cAAeiC,EAAEhC,EAAAA,EAAAA,SAEpC,GAAc,OAAVU,EACF,MAAM,UAAU,iCAElB,IAAKhD,EACH,MAAM,UAAU,uCAAsC,OAAAqB,QAAAC,gCAAA,WAItDiD,EAAOC,QAAQlC,EAAWF,EAAWC,EAASC,GAAYD,EAAUM,EAAcD,GAElF,IAAW+B,GAAI1D,MAAMC,QAAQgC,GAASA,EAAQ,CAACA,IAAQ/B,IAAI,SAACyD,EAAGC,GAC7D,IAAUC,EAAG7D,MAAMC,QAAQoD,IAAcA,EAAUS,OAASF,EAAM,EAAIP,EAAUO,GAAOP,GAAa,GACpG,OAAaG,EAACvB,MAAM,CAAEA,MAAO0B,EAAGN,UAAWQ,GAC7C,GAAE,OAEiBvD,QAAAA,QAAAA,QAAQyD,IAAIL,IAAM7C,KAAA,SAA/BmD,GAEN,IAAmBC,EAAa,GAKhC,GAJAD,EAAKE,OAAO,SAAGC,GAAM,SAANA,MAAmB,GAAEC,QAAQ,SAAAC,KAAGF,OACtCjE,IAAI,SAAAe,GAAKA,OAAAA,EAAEqD,OAAO,GAAEF,QAAQ,SAACE,GAAO,OAAkBL,EAACpB,KAAKyB,EAAQ,EAC7E,GAEIL,EAAcH,OAChB,UAAeS,MAACN,EAAc5D,KAAK,OAErC,IAAUS,EAAG,GAEb,OADAkD,EAAKI,QAAQ,SAACI,GAAQ1D,OAAAA,OAAcA,EAAc,MAAH0D,OAAG,EAAHA,EAAKR,KAAM,GAC7ClD,CAAA,EAEd,6DAzBuD2D,CAAA,EAyBvD,SAAQC,GACP,MACDA,CAAA,GACF,CAAA,MAAAzD,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,CC1FuBkC,CAAS1D,EAAS,CAAE6B,QAAS4B,EAAQ5B,WAAnDqD,KAAAA,SAAAA,GAEN,OAAIpC,kBACWA,EAAS,CAAEW,QAAAA,EAASyB,MAAKC,EAAA,CAAA,EAAOD,GAASlC,WAAAA,KAE/C,CAAEkC,MAAKC,EAAA,CAAA,EAAOD,GAASzB,QAAAA,EAAST,WAAAA,EAAa,EAE1D,CADG,MACHxB,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,CAAA,CAEA,QAAiB2B,EAAGI,EAuCnBtE,MAAA,CAAA,orBAAAA,MChEwCmG,EAAA,SAACC,EAAsBN,GAAqB,IAEnF,GAAKM,EAAI7C,MAAM8C,SAAWjG,QAAQC,IAAIiG,yBAA2BF,EAAI7C,MAAMgD,KACzE,OAAA3E,QAAAC,QAAOiE,EAAIU,OAAO,KAAKC,KAAK,CAAEb,QAAS,mBAEzC,IAAQW,EAASH,EAAI7C,MAAbgD,KAER,IACET,EAAIY,eAAe,CAAA,EAAI,CAACC,OAAQ,KAChCb,EAAIc,UAAU,IAAK,CAAEC,SAAUN,GAAW,MAC1CT,EAAIgB,KAIL,CAHA,MAAMd,GAEL,OADA3D,QAAQ0E,MAAMf,GACdpE,QAAAC,QAAOiE,EAAIU,OAAO,KAAKC,KAAK,CAAEb,QAAS,2BACxC,CAAA,OAAAhE,QAAAC,SACF,CAAA,MAAAU,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,ECmBuB,SAAcyE,EAACnD,GAErC,OAAcuC,SAAAA,EAAqBN,GAAwB,IAAA,IAAAmB,EAEzD,IArCqB,SAACb,GAExB,IAAec,EAAGd,EAAItD,QAAQqE,cAC9B,IAAKD,EACH,OAAO,EAET,MAAaA,EAAUE,MAAM,KAAK,GACdC,EAAAA,OAAOC,KAAKC,EAAM,UAAUpG,WAAWiG,MAAM,KACjE,OADWI,EAAA,KACKpH,QAAQC,IAAIoH,iBADZD,EAAA,KACuCpH,QAAQC,IAAIqH,mBACrE,CA4BSR,CAAUd,GACb,uBAAON,EAAIU,OAAO,KAAKmB,KAAK,kBAE9B,MAAgB,OAAAvB,EAAAA,EAAIlF,WAAJ,EAAA+F,EAAUW,OAE1B,IAAKC,EACH,KAAM,mBAAkB,OAELC,QAAAA,QAlCF,SAAUD,GAA+B,IAAA,IAAAE,EAAAC,EAAAC,EAExDC,QAAUL,GAAsB,SAAtBA,EAASM,uBAAaH,EAAtBD,EAAwBK,YAAxB,SAAAJ,EAAmC1C,aAAnC2C,EAAyCnE,GAEzD,IAAKoE,EACH,KAAM,iCAER7F,QAAQC,IAAI,kBAAmB4F,GAC/B,IAAYpD,EAAGuD,EAAY,CAAExF,SAAUzC,QAAQC,IAAIG,8BAA+B8H,eAAe,MAAO,OACnFxD,QAAAA,QAAAA,EAAOyD,UAAUC,QAAhCC,KAAAA,SAAAA,GACN,IAAWlE,EAAGkE,EAAOC,KAAK,SAAAC,GAAC,SAAM7E,KAAOoE,CAAO,GAAC,OAC1BpD,QAAAA,QAAAA,EAAO8D,MAAMJ,KAAK,CAAEhD,OAAQ,CAAEqD,KAAMtE,EAAMuE,QAASC,OAAQ,CAAEjF,GAAI,CAAEkF,GAAInB,EAAQ/D,SAAW3B,KAAA,SAA1G8G,GACN,IAAYC,EAAGD,EAAQ,GAEvB,IAAKC,EACH,KAAuChB,iCAAAA,EAGzC,OADA7F,QAAQC,IAAI,aAAciC,EAAMuE,SACpBI,EAAAA,CAAAA,EAAAA,GAAQ3E,MAAAA,GAAO,EAE7B,GAAC,mCAcwBuD,CAAkBD,IAAQ1F,KAAA,SAAzC+G,GAENrF,EAASqF,EAAeC,SAAAA,OACnB,OAAAvH,QAAAC,gCAAA,WACD,IAAKsH,EAAM/D,OACT,KAAM,wBAEgC,OAAxC/C,QAAQC,IAAI,qBAAsB6G,mBAC5BvH,QAAQyD,IAAI8D,EAAM3H,IAAI,SAAA4H,GAAC,OAAOtD,EAAC/B,WAAWqF,EAAE,KAClD/G,KAAAA,WACA,OADAA,QAAQC,IAAI,wBACDmE,KAAK,CAAE4C,aAAa,EAAMF,MAAAA,GAAQ,EAC9C,6DAREpD,CAAA,EAQF,SAAMC,GAEL,OADA3D,QAAQ0E,MAAMf,KACHS,KAAK,CAAE4C,aAAa,EAAOrD,IAAAA,GACvC,GAEF,CAAA,MAAAzD,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,EAAC,EAEN,CADG,MACHA,GAAA,OAAAX,QAAAY,OAAAD,EAAA,CAAA,CAAA"}