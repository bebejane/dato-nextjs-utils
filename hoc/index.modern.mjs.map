{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken:string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n  \n  if(preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig, \n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = { \n  variables?: any | any[], \n  preview?: boolean, \n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false, apiToken} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","result","console","log","requestName","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","linkConfig","link","cache","InMemoryCache","ssrMode","isServer","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","context","apiQuery","options","variables","_ref","_ref$preview","client","setLink","previewLink","batch","q","idx","vars","length","resolve","all","data","errorMessages","filter","_ref2","errors","forEach","_ref3","message","Error","res","err","props","gql","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","withRevalidate","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","id","buildClient","requestTimeout","itemTypes","list","models","model","find","m","items","type","api_key","fields","eq","then","records","record","paths","p","revalidated","_catch"],"mappings":"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"}