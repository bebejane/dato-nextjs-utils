{"version":3,"file":"index.modern.mjs","sources":["../src/hoc/withGlobalProps.ts","../src/api/index.ts","../src/hoc/withPreview.ts","../src/hoc/withWebPreviews.ts","../src/utils/cors.ts","../src/hoc/withWebPreviewsEdge.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withBackup.ts","../src/hoc/withBasicAuthEdge.ts","../src/hoc/withFavicon.ts","../src/hoc/withTests.ts","../src/hoc/withCors.ts","../src/hoc/withVercelCronAuth.ts","../src/hoc/withBackupEdge.ts","../src/hoc/withVercelCronAuthEdge.ts"],"sourcesContent":["import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': 'true'\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const checkIsPaganationQuery = (doc: TypedDocumentNode): boolean => {\n  const operation = doc.definitions.find((d) => d.kind === 'OperationDefinition')\n\n  if (!operation)\n    throw new Error('Not a pagable query. Missing operation definition')\n\n  const { selectionSet, variableDefinitions } = operation as any\n\n  if (!selectionSet.selections.find((s) => s.alias?.value === 'pagination'))\n    throw new Error('Not a pagable query. Missing pagination field')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'first'))\n    throw new Error('Not a pagable query. Missing $first variable')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'skip'))\n    throw new Error('Not a pagable query. Missing $skip variable')\n\n  return true\n}\n\nexport const apiQueryAll = async (doc: TypedDocumentNode, opt: ApiQueryOptions = {}, options = { batchSize: 50, delay: 100 }): Promise<any> => {\n\n  checkIsPaganationQuery(doc)\n\n  const results = {}\n  let size = 100;\n  let skip = 0;\n\n  const res = await apiQuery(doc, { variables: { ...opt.variables, first: size, skip } });\n\n  if (res.pagination?.count === undefined)\n    throw new Error('Not a pagable query')\n\n  const { count } = res.pagination\n\n  const mergeProps = (res) => {\n    const props = Object.keys(res);\n\n    for (let i = 0; i < props.length; i++) {\n      const k = props[i]\n      const el = res[props[i]];\n      if (Array.isArray(el)) {\n        results[k] = !results[k] ? el : results[k].concat(el)\n      } else\n        results[k] = el;\n    }\n  }\n\n  const isRejected = (input: PromiseSettledResult<unknown>): input is PromiseRejectedResult =>\n    input.status === 'rejected'\n\n  const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>\n    input.status === 'fulfilled'\n\n  mergeProps(res)\n\n  let reqs = []\n  for (let skip = size; skip < count; skip += size) {\n    if (reqs.length < options.batchSize && skip + size < count)\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n    else {\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n\n      const data = await Promise.allSettled(reqs)\n      const error = data.find(isRejected)?.reason\n\n      if (error)\n        throw new Error(error)\n\n      for (let x = 0; x < data.length; x++) {\n        //@ts-ignore\n        mergeProps(data[x].value);\n      }\n      await new Promise(r => setTimeout(r, options.delay))\n      reqs = []\n    }\n  }\n  return results\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.method === 'GET' && req.query?.ping)\n    return res.status(200).send('pong')\n\n  if (!process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `DATOCMS_PREVIEW_SECRET env not set` })\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `Invalid token` })\n\n  if (!req.query.slug)\n    return res.status(500).json({ message: 'Invalid slug' })\n\n  const { slug } = req.query as { slug: string }\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 3 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\n\nexport default function withWebPreviews(generatePreviewUrl: (record: any) => Promise<string | null>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (!process.env.DATOCMS_PREVIEW_SECRET)\n      throw new Error('DATOCMS_PREVIEW_SECRET is not set in .env')\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.setHeader('Content-Type', 'application/json');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    if (!req.body)\n      throw new Error('No body found in request')\n\n    const payload = req.body\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return res.status(200).json({ previewLinks });\n  }\n}","/**\n * Multi purpose CORS lib.\n * Note: Based on the `cors` package in npm but using only\n * web APIs. Feel free to use it in your own projects.\n */\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[]\n\ntype OriginFn = (\n  origin: string | undefined,\n  req: Request\n) => StaticOrigin | Promise<StaticOrigin>\n\ninterface CorsOptions {\n  origin?: StaticOrigin | OriginFn\n  methods?: string | string[]\n  allowedHeaders?: string | string[]\n  exposedHeaders?: string | string[]\n  credentials?: boolean\n  maxAge?: number\n  preflightContinue?: boolean\n  optionsSuccessStatus?: number\n}\n\nconst defaultOptions: CorsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n}\n\nfunction isOriginAllowed(origin: string, allowed: StaticOrigin): boolean {\n  return Array.isArray(allowed)\n    ? allowed.some((o) => isOriginAllowed(origin, o))\n    : typeof allowed === 'string'\n      ? origin === allowed\n      : allowed instanceof RegExp\n        ? allowed.test(origin)\n        : !!allowed\n}\n\nfunction getOriginHeaders(reqOrigin: string | undefined, origin: StaticOrigin) {\n  const headers = new Headers()\n\n  if (origin === '*') {\n    // Allow any origin\n    headers.set('Access-Control-Allow-Origin', '*')\n  } else if (typeof origin === 'string') {\n    // Fixed origin\n    headers.set('Access-Control-Allow-Origin', origin)\n    headers.append('Vary', 'Origin')\n  } else {\n    const allowed = isOriginAllowed(reqOrigin ?? '', origin)\n\n    if (allowed && reqOrigin) {\n      headers.set('Access-Control-Allow-Origin', reqOrigin)\n    }\n    headers.append('Vary', 'Origin')\n  }\n\n  return headers\n}\n\n// originHeadersFromReq\n\nasync function originHeadersFromReq(\n  req: Request,\n  origin: StaticOrigin | OriginFn\n) {\n  const reqOrigin = req.headers.get('Origin') || undefined\n  const value =\n    typeof origin === 'function' ? await origin(reqOrigin, req) : origin\n\n  if (!value) return\n  return getOriginHeaders(reqOrigin, value)\n}\n\nfunction getAllowedHeaders(req: Request, allowed?: string | string[]) {\n  const headers = new Headers()\n\n  if (!allowed) {\n    allowed = req.headers.get('Access-Control-Request-Headers')!\n    headers.append('Vary', 'Access-Control-Request-Headers')\n  } else if (Array.isArray(allowed)) {\n    // If the allowed headers is an array, turn it into a string\n    allowed = allowed.join(',')\n  }\n  if (allowed) {\n    headers.set('Access-Control-Allow-Headers', allowed)\n  }\n\n  return headers\n}\n\nexport default async function cors(\n  req: Request,\n  res: Response,\n  options?: CorsOptions\n) {\n  const opts = { ...defaultOptions, ...options }\n  const { headers } = res\n  const originHeaders = await originHeadersFromReq(req, opts.origin ?? false)\n  const mergeHeaders = (v: string, k: string) => {\n    if (k === 'Vary') headers.append(k, v)\n    else headers.set(k, v)\n  }\n\n  // If there's no origin we won't touch the response\n  if (!originHeaders) return res\n\n  originHeaders.forEach(mergeHeaders)\n\n  if (opts.credentials) {\n    headers.set('Access-Control-Allow-Credentials', 'true')\n  }\n\n  const exposed = Array.isArray(opts.exposedHeaders)\n    ? opts.exposedHeaders.join(',')\n    : opts.exposedHeaders\n\n  if (exposed) {\n    headers.set('Access-Control-Expose-Headers', exposed)\n  }\n\n  // Handle the preflight request\n  if (req.method === 'OPTIONS') {\n    if (opts.methods) {\n      const methods = Array.isArray(opts.methods)\n        ? opts.methods.join(',')\n        : opts.methods\n\n      headers.set('Access-Control-Allow-Methods', methods)\n    }\n\n    getAllowedHeaders(req, opts.allowedHeaders).forEach(mergeHeaders)\n\n    if (typeof opts.maxAge === 'number') {\n      headers.set('Access-Control-Max-Age', String(opts.maxAge))\n    }\n\n    if (opts.preflightContinue) return res\n\n    headers.set('Content-Length', '0')\n    return new Response(null, { status: opts.optionsSuccessStatus, headers })\n  }\n\n  // If we got here, it's a normal request\n  return res\n}\n\nexport function initCors(options?: CorsOptions) {\n  return (req: Request, res: Response) => cors(req, res, options)\n}","import { NextRequest, NextResponse } from \"next/server.js\";\nimport cors from '../utils/cors.js'\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\nexport default function withWebPreviewsEdge(generatePreviewUrl: (record: any) => Promise<string | null>): (req: NextRequest, res: NextResponse) => void {\n\n  const corsOptions = {\n    origin: '*',\n    methods: ['POST', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    preflightContinue: false,\n  }\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (!process.env.DATOCMS_PREVIEW_SECRET)\n      throw new Error('DATOCMS_PREVIEW_SECRET is not set in .env')\n\n    if (req.method === 'OPTIONS')\n      return cors(req, new Response('ok', { status: 200 }), corsOptions)\n\n    const payload = await req.json()\n\n    if (!payload)\n      throw new Error('No form data in request body')\n\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return cors(\n      req,\n      new Response(JSON.stringify({ previewLinks }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      }), corsOptions)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'GET' && req.query?.ping)\n      return res.status(200).send('pong')\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body;\n\n    if (!payload || !payload?.entity)\n      return res.status(400).send('Payload empty or missing entity')\n\n    const { entity, related_entities, event_type } = payload\n    const model = related_entities.find(({ id }) => id === entity.relationships?.item_type?.data?.id)\n\n    if (!model)\n      return res.status(400).send('Model not found in payload')\n\n    const record = { ...entity.attributes, model: model.attributes }\n    const delay = Date.now() - Math.max(new Date(entity.meta.updated_at).getTime(), new Date(entity.meta.published_at).getTime(), new Date(entity.meta.created_at).getTime())\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths)\n          return res.status(400).send('Nothing to revalidate. Paths empty')\n\n        if (paths.length === 0)\n          return res.status(200).json({ revalidated: false, paths, delay, event_type })\n\n        await Promise.all(paths.map(p => res.revalidate(p)))\n\n        console.log(`revalidate${delay && !['unpublish', 'delete'].includes(event_type) ? ` (${delay}ms)` : ''} ${event_type}`, paths)\n\n        return res.status(200).json({ revalidated: true, paths, delay, event_type })\n      } catch (err) {\n        console.log('Error revalidating', paths)\n        console.error(err)\n        return res.status(200).json({ revalidated: false, paths, err, delay, event_type })\n      }\n    })\n  }\n}\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n    throw new Error('BASIC_AUTH_USER or BASIC_AUTH_PASSWORD not set in .env')\n\n  const basicAuth = req.headers.authorization\n\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void, options?: { username: string, password: string }): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    if (process.env.NODE_ENV === 'development')\n      return callback(req, res)\n\n    const basicAuth = req.headers.authorization\n\n    if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n      throw new Error('Basic auth not set up in .env')\n\n    if (!basicAuth || !process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD) {\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"NodeJs\", charset=\"UTF-8\"')\n      return res.status(401).send('Access denied')\n    }\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\nimport withBasicAuth from './withBasicAuth.js';\nimport { buildClient } from '@datocms/cma-client';\n\nconst withBackup = withBasicAuth(async (req: NextApiRequest, res: NextApiResponse) => {\n\n  if (!process.env.DATOCMS_ENVIRONMENT)\n    return res.status(500).send('DATOCMS_ENVIRONMENT not set in .env')\n  if (!process.env.DATOCMS_API_TOKEN)\n    return res.status(500).send('DATOCMS_API_TOKEN not set in .env')\n\n  try {\n\n    const maxBackups = req.query.max ? parseInt(req.query.max as string) : 1\n    const backupPrefix = 'auto-backup-'\n    const client = buildClient({ environment: process.env.DATOCMS_ENVIRONMENT, apiToken: process.env.DATOCMS_API_TOKEN, requestTimeout: 3000 })\n    const backups = (await client.environments.list()).filter(e => e.id.startsWith('auto-backup') && e.meta.primary === false).sort((a, b) => a.id.replace(backupPrefix, '') > b.id.replace(backupPrefix, '') ? -1 : 1)\n    const today = new Date().toISOString().replace('T', '-').replaceAll(':', '-').replace('Z', '').split('.')[0]\n    const name = `auto-backup-${today}`\n\n    console.log('Last backup was: ', backups[0]?.id ?? 'none')\n    console.log('Max backups: ', maxBackups)\n    console.log('Creating backup...', name)\n\n    await client.environments.fork(process.env.DATOCMS_ENVIRONMENT, { id: name }, {\n      immediate_return: false,\n      fast: true,\n      force: true\n    })\n\n    for (let i = 0; i < backups.reverse().slice(maxBackups - 1).length; i++) {\n      try {\n        console.log('Deleting old backup...', backups[i].id)\n        await client.environments.destroy(backups[i].id)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    console.log('Backup done!')\n    return res.status(200).send(`Backup done ${process.env.DATOCMS_ENVIRONMENT} > ${name}`)\n  } catch (e) {\n    console.log(e)\n    return res.status(500).send(`Backup failed: ${e.message}`)\n  }\n\n})\n\nexport default withBackup\nexport const maxDuration = 30;\n","import type { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withBasicAuthEdge(callback: (req: NextRequest, res: NextResponse) => void, options?: { username: string, password: string }): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    const basicAuth = req.headers.get('authorization')\n\n    if (!basicAuth)\n      return new Response('Access denied', { status: 401 })\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return new Response('Access denied. Wrong password or username.', { status: 401 })\n\n    return callback(req, res)\n  }\n}","import { GetServerSideProps } from \"next\";\n\nexport const withFavicon: GetServerSideProps = async function ({ res }) {\n\n  if (!process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN)\n    return { notFound: true }\n\n  const query = await fetch('https://graphql.datocms.com/', {\n    method: 'POST',\n    body: JSON.stringify({\n      query:\n        `query Site {\n          site: _site {\n            favicon{\n              url\n              mimeType\n            }\n          }\n        }\n    `}),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accepts': 'application/json',\n      'Authorization': process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n    }\n  })\n\n  const { data: { site } } = await query.json() as { data: { site: any } }\n\n  if (!site?.favicon.url)\n    return { notFound: true }\n\n  const reader = (await fetch(site.favicon.url)).body.getReader()\n\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done)\n      break;\n    res.write(value)\n  }\n\n  res.end()\n\n  return {\n    props: {},\n  };\n}\n\nexport default withFavicon","import type { NextApiRequest, NextApiResponse } from 'next'\nimport withBasicAuth from './withBasicAuth.js';\nimport withCors from './withCors.js';\nimport { Client, buildClient } from '@datocms/cma-client';\nimport { ItemType } from '@datocms/cma-client/dist/types/generated/SimpleSchemaTypes.js';\n\nconst withTests = withCors(withBasicAuth(async (req: NextApiRequest, res: NextApiResponse) => {\n\n  const results = await testApiEndpoints()\n\n  if (req.query?.json) {\n    res.setHeader('Content-Type', 'application/json')\n    res.status(200).json(results)\n  } else if (req.query.text) {\n    res.setHeader('Content-Type', 'text/plain')\n    res.status(200).send(testResultsToString(results))\n  } else {\n    res.setHeader('Content-Type', 'text/html')\n    res.status(200).send(testResultsToHtml(results))\n  }\n}))\n\nexport default withTests\n\nconst baseApiUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api`\n\ntype PreviewLink = {\n  label: string\n  url: string\n}\n\ntype RevalidateResponse = {\n  revalidated: boolean,\n  paths: string[]\n  delays: number\n  event_type: string\n}\n\ntype TestResult = {\n  model: string\n  previews?: PreviewLink[]\n  revalidate?: RevalidateResponse\n}\n\nexport async function testApiEndpoints() {\n\n  const client = buildClient({ apiToken: process.env.DATOCMS_API_TOKEN })\n  const site = await client.site.find()\n\n  console.log(`Testing site: ${site.name}`)\n\n  const itemTypes = await client.itemTypes.list()\n  const models = itemTypes.filter(t => !t.modular_block)\n\n  const results = await Promise.all(models.map(async (model, i) => {\n\n    const r: TestResult = { model: model.api_key }\n    console.log(`${i + 1}/${models.length}: ${r.model}`)\n\n    try {\n      const previews = await testWebPreviewsEndpoint(model, client)\n      if (previews.length > 0) {\n        r.previews = previews\n      }\n    } catch (e) { }\n\n    try {\n      r.revalidate = await testRevalidateEndpoint(model, client)\n    } catch (e) { }\n\n    return r\n  }))\n\n  return results.sort((a, b) => a.model > b.model ? 1 : -1)\n}\n\nexport const testResultsToString = (results: TestResult[]) => {\n  const tests = results.map(r => {\n    return `${r.model} - Previews: ${r.previews ? 'YES' : 'NO'} / Revalidate: ${r.revalidate ? 'YES' : 'NO'}`\n  }).join('\\n')\n\n  const previews = results.filter(r => r.previews).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const revalidate = results.filter(r => r.revalidate?.paths.length).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const nopreviews = results.filter(r => !r.previews).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const norevalidate = results.filter(r => !r.revalidate || !r.revalidate?.paths.length).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n\n  return `WEB PREVIEWS\\n${previews}\\n\\nNO WEB PREVIEWS:\\n${nopreviews}\\n\\nREVALIDATE\\n${revalidate}\\n\\nNO REVALIDATE\\n${norevalidate}`\n\n}\n\nexport const testResultsToHtml = (results: TestResult[]) => {\n  return `\n    <html>\n      <head>\n        <style>\n          table {\n            border-collapse: collapse;\n            width: 400px;\n          }\n          th, td {\n            padding: 5px;\n            text-align:left;\n          }\n          .center{\n            text-align:center;\n          }\n          .error{\n            color:red;\n          }\n        </style>\n      </head>\n      <body>\n        <pre>\n        <table>\n          <thead>\n            <tr>\n              <th>Model</th>\n              <th>Web Previews</th>\n              <th>Revalidate</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${results.map(r => `\n              <tr \n                title=\"Web Previews\\n-----------\\n${!r.previews ? '' : r.previews?.map(p => `${p.label}: ${p.url}`).join('\\n')}\\n\\nRevalidate\\n-----------\\n${!r.revalidate ? '' : r.revalidate?.paths?.join('\\n')}\"\n                class=\"${!r.previews || !r.revalidate?.revalidated ? 'error' : ''}\"\n              >\n                <td>${r.model}</td>\n                <td class=\"center\">${r.previews ? 'x' : '-'}</td>\n                <td class=\"center\">${r.revalidate?.revalidated ? 'x' : '-'}</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </pre>\n      </body>\n    </html>\n  `\n}\n\nconst testWebPreviewsEndpoint = async (itemType: ItemType, client: Client): Promise<PreviewLink[]> => {\n\n  const item = (await client.items.list({ filter: { type: itemType.api_key } }))[0]\n  const res = await fetch(`${baseApiUrl}/web-previews`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Basic ${btoa(`${process.env.BASIC_AUTH_USER}:${process.env.BASIC_AUTH_PASSWORD}`)}`\n    },\n    body: JSON.stringify({\n      item: {\n        attributes: item || {}\n      },\n      itemType: {\n        attributes: itemType\n      },\n      environmentId: \"main\",\n      locale: \"en\"\n    })\n  })\n\n  const json = await res.json()\n  return json.previewLinks\n\n}\n\nconst testRevalidateEndpoint = async (itemType: ItemType, client: Client): Promise<RevalidateResponse> => {\n\n  const item = (await client.items.list({ filter: { type: itemType.api_key } }))[0]\n  const res = await fetch(`${baseApiUrl}/revalidate`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Basic ${btoa(`${process.env.BASIC_AUTH_USER}:${process.env.BASIC_AUTH_PASSWORD}`)}`\n    },\n    body: JSON.stringify({\n      \"environment\": \"main\",\n      \"entity_type\": \"item\",\n      \"event_type\": \"update\",\n      \"entity\": {\n        \"id\": item.id,\n        \"type\": \"item\",\n        \"attributes\": {\n          ...item || {}\n        },\n        \"relationships\": {\n          \"item_type\": {\n            \"data\": {\n              \"id\": itemType.id,\n              \"type\": \"item_type\"\n            }\n          }\n        },\n        \"meta\": {\n          ...item.meta,\n          \"updated_at\": new Date().toISOString(),\n          \"published_at\": new Date().toISOString(),\n          \"created_at\": new Date().toISOString()\n        }\n      },\n      \"related_entities\": [\n        {\n          \"id\": itemType.id,\n          \"type\": \"item_type\",\n          \"attributes\": itemType\n        }\n      ],\n    })\n  })\n  if (res.status === 200) {\n    const json = await res.json()\n    return json\n  } else {\n    throw new Error(`Error testing revalidate endpoint: ${res.status} ${res.statusText}`)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withCors(callback: (req: NextApiRequest, res: NextApiResponse) => void, options?: { origin: string, methods: string[] }): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n    res.setHeader('Access-Control-Allow-Origin', options?.origin || '*');\n    res.setHeader('Access-Control-Allow-Methods', options?.methods?.join(',') || 'POST,GET,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withVercelCronAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.CRON_SECRET)\n      throw new Error('CRON_SECRET not set in .env')\n\n    if (req.headers?.authorization === `Basic ${process.env.CRON_SECRET}`)\n      return callback(req, res)\n    else\n      return res.status(401).send('Access denied')\n  }\n}","import type { NextRequest, NextResponse } from 'next/server.js'\nimport withVercelCronAuthEdge from './withVercelCronAuthEdge.js';\nimport { buildClient } from '@datocms/cma-client-browser';\n\nconst withBackupEdge = withVercelCronAuthEdge(async (req: NextRequest, res: NextResponse) => {\n\n  if (!process.env.DATOCMS_ENVIRONMENT)\n    throw new Error('DATOCMS_ENVIRONMENT not set in .env')\n  if (!process.env.DATOCMS_API_TOKEN)\n    throw new Error('DATOCMS_API_TOKEN not set in .env')\n\n  try {\n    const params = new URLSearchParams(req.nextUrl.searchParams)\n    const maxBackups = params.get('max') ? parseInt(params.get('max') as string) : 1\n    const backupPrefix = 'auto-backup-'\n    const client = buildClient({ environment: process.env.DATOCMS_ENVIRONMENT, apiToken: process.env.DATOCMS_API_TOKEN, requestTimeout: 3000 })\n    const backups = (await client.environments.list()).filter(e => e.id.startsWith('auto-backup') && e.meta.primary === false).sort((a, b) => a.id.replace(backupPrefix, '') > b.id.replace(backupPrefix, '') ? -1 : 1)\n    const today = new Date().toISOString().replace('T', '-').replaceAll(':', '-').replace('Z', '').split('.')[0]\n    const name = `auto-backup-${today}`\n\n    console.log('Last backup was: ', backups[0]?.id ?? 'none')\n    console.log('Max backups: ', maxBackups)\n    console.log('Creating backup...', name)\n\n    await client.environments.fork(process.env.DATOCMS_ENVIRONMENT, { id: name }, {\n      immediate_return: false,\n      fast: true,\n      force: true\n    })\n\n    for (let i = 0; i < backups.reverse().slice(maxBackups - 1).length; i++) {\n      try {\n        console.log('Deleting old backup...', backups[i].id)\n        await client.environments.destroy(backups[i].id)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    console.log('Backup done!')\n    return new Response(`Backup done ${process.env.DATOCMS_ENVIRONMENT} > ${name}`, { status: 200 })\n  } catch (e) {\n    console.log(e)\n    return new Response(`Backup failed: ${e.message}`, { status: 500 })\n  }\n})\n\nexport default withBackupEdge","import { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withVercelCronAuthEdge(callback: (req: NextRequest, res: NextResponse) => void): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n    if (!process.env.CRON_SECRET)\n      throw new Error('CRON_SECRET not set in .env')\n\n    if (req.headers.get('authorization') === `Bearer ${process.env.CRON_SECRET}`)\n      return callback(req, res)\n    else\n      return new Response('Access denied', { status: 401 })\n  }\n}"],"names":["_templateObject","isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","_ref","_process$env$DATOCMS_","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","_extends","text","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","client","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","model","context","apiQuery","options","variables","_ref2","_ref2$preview","Error","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref4","message","res","_catch","err","props","withPreview","req","_req$query","method","ping","status","send","DATOCMS_PREVIEW_SECRET","json","secret","slug","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","withWebPreviews","generatePreviewUrl","NEXT_PUBLIC_SITE_URL","SITE_URL","setHeader","previewLinks","path","_path","baseUrl","url","URL","origin","pathname","label","cors","methods","opts","originHeadersFromReq","_opts$origin","originHeaders","v","k","append","set","mergeHeaders","credentials","exposed","exposedHeaders","allowed","Headers","get","getAllowedHeaders","allowedHeaders","String","preflightContinue","Response","optionsSuccessStatus","value","reqOrigin","isOriginAllowed","getOriginHeaders","then","_temp2","some","o","RegExp","test","withWebPreviewsEdge","corsOptions","payload","stringify","basicAuth","entity","event_type","related_entities","find","_entity$relationships","relationships","_entity$relationships2","item_type","_entity$relationships3","record","attributes","delay","now","Math","max","meta","updated_at","published_at","created_at","paths","revalidated","p","includes","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","authorization","auth","split","_Buffer$from$toString","Buffer","from","withBasicAuth","NODE_ENV","username","password","pwd","withBackup","DATOCMS_API_TOKEN","maxBackups","backupPrefix","buildClient","environment","requestTimeout","environments","list","_client$environments$","_backups$0$id","_backups$","backups","primary","sort","a","b","replace","name","toISOString","replaceAll","fork","immediate_return","fast","force","i","_for","reverse","slice","_temp","destroy","state","pact","s","_Pact","prototype","onFulfilled","onRejected","this","_settle","_this","withBasicAuthEdge","withFavicon","Accepts","site","favicon","reader","_fetch","getReader","_interrupt","read","_ref3","done","write","notFound","withTests","itemTypes","models","modular_block","_temp4","testRevalidateEndpoint","_testRevalidateEndpoi","r","api_key","_temp5","testWebPreviewsEndpoint","previews","results","testApiEndpoints","testResultsToString","testResultsToHtml","baseApiUrl","_r$revalidate","_r$revalidate2","_r$previews","_r$revalidate3","_r$revalidate3$paths","_r$revalidate4","_r$revalidate5","itemType","items","type","_client$items$list","item","btoa","environmentId","locale","_client$items$list2","entity_type","statusText","withVercelCronAuth","_req$headers","CRON_SECRET","withBackupEdge","params","URLSearchParams","nextUrl","searchParams","today","_temp3"],"mappings":"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"}