{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n  console.log(options);\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","requestName","Date","t","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","link","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","model","context","apiQuery","options","variables","_ref","_ref$preview","Error","Promise","resolve","setLink","previewLink","batch","q","idx","length","vars","all","data","errorMessages","filter","errors","_ref2","forEach","_ref3","e","message","res","_catch","err","reject","props","_extends","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","withRevalidate","_req$body","basicAuth","authorization","auth","split","_Buffer$from$toString","Buffer","from","pwd","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"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"}