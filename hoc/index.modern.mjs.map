{"version":3,"file":"index.modern.mjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withWebPreviews.ts","../src/utils/cors.ts","../src/hoc/withWebPreviewsEdge.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withBasicAuthEdge.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const apiQueryAll = async (doc: TypedDocumentNode, opt: ApiQueryOptions = {}, options = { batchSize: 50, delay: 100 }): Promise<any> => {\n\n  const results = {}\n  let size = 100;\n  let skip = 0;\n  const res = await apiQuery(doc, { variables: { ...opt.variables, first: size, skip } });\n\n  if (res.pagination?.count === undefined)\n    throw new Error('Not a pagable query')\n\n  const { count } = res.pagination\n\n  const mergeProps = (res) => {\n    const props = Object.keys(res);\n\n    for (let i = 0; i < props.length; i++) {\n      const k = props[i]\n      const el = res[props[i]];\n      if (Array.isArray(el)) {\n        results[k] = !results[k] ? el : results[k].concat(el)\n      } else\n        results[k] = el;\n    }\n  }\n\n  const isRejected = (input: PromiseSettledResult<unknown>): input is PromiseRejectedResult =>\n    input.status === 'rejected'\n\n  const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>\n    input.status === 'fulfilled'\n\n  mergeProps(res)\n\n  let reqs = []\n  for (let skip = size; skip < count; skip += size) {\n    if (reqs.length < options.batchSize && skip + size < count)\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n    else {\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n\n      const data = await Promise.allSettled(reqs)\n      const error = data.find(isRejected)?.reason\n\n      if (error)\n        throw new Error(error)\n\n      for (let x = 0; x < data.length; x++) {\n        //@ts-ignore\n        mergeProps(data[x].value);\n      }\n      await new Promise(r => setTimeout(r, options.delay))\n      reqs = []\n    }\n  }\n  return results\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default function withWebPreviews(generatePreviewUrl: (record: any) => Promise<string>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.setHeader('Content-Type', 'application/json');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    if (!req.body)\n      throw new Error('No body found in request')\n\n    const payload = req.body\n    const path = await generatePreviewUrl(payload);\n    const previewLinks = []\n    const baseUrl = path?.startsWith('https://') ? '' : process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published')\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return res.status(200).json({ previewLinks });\n  }\n}","/**\n * Multi purpose CORS lib.\n * Note: Based on the `cors` package in npm but using only\n * web APIs. Feel free to use it in your own projects.\n */\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[]\n\ntype OriginFn = (\n  origin: string | undefined,\n  req: Request\n) => StaticOrigin | Promise<StaticOrigin>\n\ninterface CorsOptions {\n  origin?: StaticOrigin | OriginFn\n  methods?: string | string[]\n  allowedHeaders?: string | string[]\n  exposedHeaders?: string | string[]\n  credentials?: boolean\n  maxAge?: number\n  preflightContinue?: boolean\n  optionsSuccessStatus?: number\n}\n\nconst defaultOptions: CorsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n}\n\nfunction isOriginAllowed(origin: string, allowed: StaticOrigin): boolean {\n  return Array.isArray(allowed)\n    ? allowed.some((o) => isOriginAllowed(origin, o))\n    : typeof allowed === 'string'\n      ? origin === allowed\n      : allowed instanceof RegExp\n        ? allowed.test(origin)\n        : !!allowed\n}\n\nfunction getOriginHeaders(reqOrigin: string | undefined, origin: StaticOrigin) {\n  const headers = new Headers()\n\n  if (origin === '*') {\n    // Allow any origin\n    headers.set('Access-Control-Allow-Origin', '*')\n  } else if (typeof origin === 'string') {\n    // Fixed origin\n    headers.set('Access-Control-Allow-Origin', origin)\n    headers.append('Vary', 'Origin')\n  } else {\n    const allowed = isOriginAllowed(reqOrigin ?? '', origin)\n\n    if (allowed && reqOrigin) {\n      headers.set('Access-Control-Allow-Origin', reqOrigin)\n    }\n    headers.append('Vary', 'Origin')\n  }\n\n  return headers\n}\n\n// originHeadersFromReq\n\nasync function originHeadersFromReq(\n  req: Request,\n  origin: StaticOrigin | OriginFn\n) {\n  const reqOrigin = req.headers.get('Origin') || undefined\n  const value =\n    typeof origin === 'function' ? await origin(reqOrigin, req) : origin\n\n  if (!value) return\n  return getOriginHeaders(reqOrigin, value)\n}\n\nfunction getAllowedHeaders(req: Request, allowed?: string | string[]) {\n  const headers = new Headers()\n\n  if (!allowed) {\n    allowed = req.headers.get('Access-Control-Request-Headers')!\n    headers.append('Vary', 'Access-Control-Request-Headers')\n  } else if (Array.isArray(allowed)) {\n    // If the allowed headers is an array, turn it into a string\n    allowed = allowed.join(',')\n  }\n  if (allowed) {\n    headers.set('Access-Control-Allow-Headers', allowed)\n  }\n\n  return headers\n}\n\nexport default async function cors(\n  req: Request,\n  res: Response,\n  options?: CorsOptions\n) {\n  const opts = { ...defaultOptions, ...options }\n  const { headers } = res\n  const originHeaders = await originHeadersFromReq(req, opts.origin ?? false)\n  const mergeHeaders = (v: string, k: string) => {\n    if (k === 'Vary') headers.append(k, v)\n    else headers.set(k, v)\n  }\n\n  // If there's no origin we won't touch the response\n  if (!originHeaders) return res\n\n  originHeaders.forEach(mergeHeaders)\n\n  if (opts.credentials) {\n    headers.set('Access-Control-Allow-Credentials', 'true')\n  }\n\n  const exposed = Array.isArray(opts.exposedHeaders)\n    ? opts.exposedHeaders.join(',')\n    : opts.exposedHeaders\n\n  if (exposed) {\n    headers.set('Access-Control-Expose-Headers', exposed)\n  }\n\n  // Handle the preflight request\n  if (req.method === 'OPTIONS') {\n    if (opts.methods) {\n      const methods = Array.isArray(opts.methods)\n        ? opts.methods.join(',')\n        : opts.methods\n\n      headers.set('Access-Control-Allow-Methods', methods)\n    }\n\n    getAllowedHeaders(req, opts.allowedHeaders).forEach(mergeHeaders)\n\n    if (typeof opts.maxAge === 'number') {\n      headers.set('Access-Control-Max-Age', String(opts.maxAge))\n    }\n\n    if (opts.preflightContinue) return res\n\n    headers.set('Content-Length', '0')\n    return new Response(null, { status: opts.optionsSuccessStatus, headers })\n  }\n\n  // If we got here, it's a normal request\n  return res\n}\n\nexport function initCors(options?: CorsOptions) {\n  return (req: Request, res: Response) => cors(req, res, options)\n}","import { NextRequest, NextResponse } from \"next/server.js\";\nimport cors from '../utils/cors.js'\n\nexport default function withWebPreviewsEdge(generatePreviewUrl: (record: any) => Promise<string>): (req: NextRequest, res: NextResponse) => void {\n\n  const corsOptions = {\n    origin: '*',\n    methods: ['POST', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    preflightContinue: false,\n  }\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (req.method === 'OPTIONS')\n      return cors(req, new Response('ok', { status: 200 }), corsOptions)\n\n    const payload = await req.json()\n\n    if (!payload)\n      throw new Error('No form data in request body')\n\n    const path = await generatePreviewUrl(payload);\n    const previewLinks = []\n    const baseUrl = path?.startsWith('https://') ? '' : process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published')\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return cors(\n      req,\n      new Response(JSON.stringify({ previewLinks }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      }), corsOptions)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId} (${model.api_key})`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'GET' && req.query?.ping)\n      return res.status(200).send('pong')\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n    record._payload = payload\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withBasicAuthEdge(callback: (req: NextRequest, res: NextResponse) => void): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    const basicAuth = req.headers.get('authorization')\n\n    if (!basicAuth)\n      return new Response('Access denied', { status: 401 })\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return new Response('Access denied. Wrong password or username.', { status: 401 })\n\n    return callback(req, res)\n  }\n}"],"names":["_ref","_process$env$DATOCMS_","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","async","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","result","text","console","log","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","_t","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","id","push","apply","seo","gql","model","context","props","options","variables","Error","setLink","batch","q","idx","vars","length","data","Promise","all","errorMessages","filter","errors","forEach","e","message","res","err","apiQuery","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","withWebPreviews","generatePreviewUrl","NEXT_PUBLIC_SITE_URL","SITE_URL","setHeader","method","send","payload","path","previewLinks","baseUrl","label","url","_payload$item","item","_payload$item$meta","meta","origin","methods","preflightContinue","optionsSuccessStatus","isOriginAllowed","allowed","some","o","RegExp","test","getOriginHeaders","reqOrigin","set","append","cors","_opts$origin","opts","originHeaders","get","value","originHeadersFromReq","mergeHeaders","v","k","credentials","exposed","exposedHeaders","Headers","getAllowedHeaders","allowedHeaders","String","withWebPreviewsEdge","corsOptions","Response","stringify","withRevalidate","_req$query","ping","basicAuth","authorization","split","user","pwd","Buffer","from","auth","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","_req$body","entity","record","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","find","m","items","type","api_key","fields","eq","_payload","paths","p","revalidated","withBasicAuth","withBasicAuthEdge"],"mappings":"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"}