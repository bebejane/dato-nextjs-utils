{"version":3,"file":"index.modern.mjs","sources":["../src/hoc/withGlobalProps.ts","../src/api/index.ts","../src/hoc/withPreview.ts","../src/hoc/withWebPreviews.ts","../src/utils/cors.ts","../src/hoc/withWebPreviewsEdge.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withBasicAuthEdge.ts"],"sourcesContent":["import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default function withWebPreviews(generatePreviewUrl: (record: any) => Promise<string>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.setHeader('Content-Type', 'application/json');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    if (!req.body)\n      throw new Error('No body found in request')\n\n    const payload = req.body\n    const path = await generatePreviewUrl(payload);\n    const previewLinks = []\n    const baseUrl = path?.startsWith('https://') ? '' : process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published')\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return res.status(200).json({ previewLinks });\n  }\n}","/**\n * Multi purpose CORS lib.\n * Note: Based on the `cors` package in npm but using only\n * web APIs. Feel free to use it in your own projects.\n */\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[]\n\ntype OriginFn = (\n  origin: string | undefined,\n  req: Request\n) => StaticOrigin | Promise<StaticOrigin>\n\ninterface CorsOptions {\n  origin?: StaticOrigin | OriginFn\n  methods?: string | string[]\n  allowedHeaders?: string | string[]\n  exposedHeaders?: string | string[]\n  credentials?: boolean\n  maxAge?: number\n  preflightContinue?: boolean\n  optionsSuccessStatus?: number\n}\n\nconst defaultOptions: CorsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n}\n\nfunction isOriginAllowed(origin: string, allowed: StaticOrigin): boolean {\n  return Array.isArray(allowed)\n    ? allowed.some((o) => isOriginAllowed(origin, o))\n    : typeof allowed === 'string'\n      ? origin === allowed\n      : allowed instanceof RegExp\n        ? allowed.test(origin)\n        : !!allowed\n}\n\nfunction getOriginHeaders(reqOrigin: string | undefined, origin: StaticOrigin) {\n  const headers = new Headers()\n\n  if (origin === '*') {\n    // Allow any origin\n    headers.set('Access-Control-Allow-Origin', '*')\n  } else if (typeof origin === 'string') {\n    // Fixed origin\n    headers.set('Access-Control-Allow-Origin', origin)\n    headers.append('Vary', 'Origin')\n  } else {\n    const allowed = isOriginAllowed(reqOrigin ?? '', origin)\n\n    if (allowed && reqOrigin) {\n      headers.set('Access-Control-Allow-Origin', reqOrigin)\n    }\n    headers.append('Vary', 'Origin')\n  }\n\n  return headers\n}\n\n// originHeadersFromReq\n\nasync function originHeadersFromReq(\n  req: Request,\n  origin: StaticOrigin | OriginFn\n) {\n  const reqOrigin = req.headers.get('Origin') || undefined\n  const value =\n    typeof origin === 'function' ? await origin(reqOrigin, req) : origin\n\n  if (!value) return\n  return getOriginHeaders(reqOrigin, value)\n}\n\nfunction getAllowedHeaders(req: Request, allowed?: string | string[]) {\n  const headers = new Headers()\n\n  if (!allowed) {\n    allowed = req.headers.get('Access-Control-Request-Headers')!\n    headers.append('Vary', 'Access-Control-Request-Headers')\n  } else if (Array.isArray(allowed)) {\n    // If the allowed headers is an array, turn it into a string\n    allowed = allowed.join(',')\n  }\n  if (allowed) {\n    headers.set('Access-Control-Allow-Headers', allowed)\n  }\n\n  return headers\n}\n\nexport default async function cors(\n  req: Request,\n  res: Response,\n  options?: CorsOptions\n) {\n  const opts = { ...defaultOptions, ...options }\n  const { headers } = res\n  const originHeaders = await originHeadersFromReq(req, opts.origin ?? false)\n  const mergeHeaders = (v: string, k: string) => {\n    if (k === 'Vary') headers.append(k, v)\n    else headers.set(k, v)\n  }\n\n  // If there's no origin we won't touch the response\n  if (!originHeaders) return res\n\n  originHeaders.forEach(mergeHeaders)\n\n  if (opts.credentials) {\n    headers.set('Access-Control-Allow-Credentials', 'true')\n  }\n\n  const exposed = Array.isArray(opts.exposedHeaders)\n    ? opts.exposedHeaders.join(',')\n    : opts.exposedHeaders\n\n  if (exposed) {\n    headers.set('Access-Control-Expose-Headers', exposed)\n  }\n\n  // Handle the preflight request\n  if (req.method === 'OPTIONS') {\n    if (opts.methods) {\n      const methods = Array.isArray(opts.methods)\n        ? opts.methods.join(',')\n        : opts.methods\n\n      headers.set('Access-Control-Allow-Methods', methods)\n    }\n\n    getAllowedHeaders(req, opts.allowedHeaders).forEach(mergeHeaders)\n\n    if (typeof opts.maxAge === 'number') {\n      headers.set('Access-Control-Max-Age', String(opts.maxAge))\n    }\n\n    if (opts.preflightContinue) return res\n\n    headers.set('Content-Length', '0')\n    return new Response(null, { status: opts.optionsSuccessStatus, headers })\n  }\n\n  // If we got here, it's a normal request\n  return res\n}\n\nexport function initCors(options?: CorsOptions) {\n  return (req: Request, res: Response) => cors(req, res, options)\n}","import { NextRequest, NextResponse } from \"next/server.js\";\nimport cors from '../utils/cors.js'\n\nexport default function withWebPreviewsEdge(generatePreviewUrl: (record: any) => Promise<string>): (req: NextRequest, res: NextResponse) => void {\n\n  const corsOptions = {\n    origin: '*',\n    methods: ['POST', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    preflightContinue: false,\n  }\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (req.method === 'OPTIONS')\n      return cors(req, new Response('ok', { status: 200 }), corsOptions)\n\n    const payload = await req.json()\n\n    if (!payload)\n      throw new Error('No form data in request body')\n\n    const path = await generatePreviewUrl(payload);\n    const previewLinks = []\n    const baseUrl = path?.startsWith('https://') ? '' : process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published')\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return cors(\n      req,\n      new Response(JSON.stringify({ previewLinks }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      }), corsOptions)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId} (${model.api_key})`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n    record._payload = payload\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withBasicAuthEdge(callback: (req: NextRequest, res: NextResponse) => void): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    const basicAuth = req.headers.get('authorization')\n\n    if (!basicAuth)\n      return new Response('Access denied', { status: 401 })\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return new Response('Access denied. Wrong password or username.', { status: 401 })\n\n    return callback(req, res)\n  }\n}"],"names":["_templateObject","isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","_ref","_process$env$DATOCMS_","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","operations","queries","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","result","console","log","requestName","batchMax","batchInterval","preview","apiToken","headers","Authorization","GRAPHQL_INCLUDE_DRAFTS","BatchHttpLink","createLink","previewLink","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","model","context","apiQuery","options","_ref2","variables","_ref2$preview","Error","client","setLink","batch","q","idx","length","vars","Promise","all","data","errorMessages","filter","errors","forEach","_ref4","e","message","res","err","props","reject","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","resolve","withWebPreviews","generatePreviewUrl","NEXT_PUBLIC_SITE_URL","SITE_URL","setHeader","method","send","payload","then","path","previewLinks","baseUrl","label","url","_payload$item","item","_payload$item$meta","meta","cors","methods","opts","originHeadersFromReq","origin","_opts$origin","originHeaders","v","k","append","set","mergeHeaders","credentials","exposed","exposedHeaders","allowed","Headers","get","getAllowedHeaders","allowedHeaders","String","preflightContinue","Response","optionsSuccessStatus","value","reqOrigin","isOriginAllowed","getOriginHeaders","_temp2","some","o","RegExp","test","withWebPreviewsEdge","corsOptions","stringify","withRevalidate","_req$body","basicAuth","authorization","auth","split","Buffer","from","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","entity","recordFromPayload","modelId","relationships","_payload$relationship2","_payload$relationship","item_type","_payload$relationship3","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","_payload","paths","p","revalidated","_catch","withBasicAuth","pwd","isAuthorized","withBasicAuthEdge"],"mappings":"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"}