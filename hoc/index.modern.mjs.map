{"version":3,"file":"index.modern.mjs","sources":["../src/hoc/withGlobalProps.ts","../src/api/index.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts"],"sourcesContent":["import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? 'main'\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n    client.headers\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId} (${model.api_key})`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","DATOCMS_ENVIRONMENT","_process$env$DATOCMS_","linkConfig","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","requestName","Date","t","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","GRAPHQL_ENVIRONMENT","BatchHttpLink","_extends","previewLink","client","ApolloClient","link","cache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","model","context","apiQuery","options","variables","_ref$preview","_ref","Error","setLink","batch","q","idx","length","vars","Promise","resolve","all","data","errorMessages","filter","errors","forEach","_ref3","e","message","res","err","reject","props","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","withRevalidate","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated","_catch","withBasicAuth","pwd","isAuthorized"],"mappings":"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"}