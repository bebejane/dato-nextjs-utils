{"version":3,"file":"index.modern.mjs","sources":["../src/hoc/withGlobalProps.ts","../src/api/index.ts","../src/hoc/withPreview.ts","../src/hoc/withWebPreviews.ts","../src/utils/cors.ts","../src/hoc/withWebPreviewsEdge.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withBackup.ts","../src/hoc/withBasicAuthEdge.ts"],"sourcesContent":["import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': 'true'\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const apiQueryAll = async (doc: TypedDocumentNode, opt: ApiQueryOptions = {}, options = { batchSize: 50, delay: 100 }): Promise<any> => {\n\n  const results = {}\n  let size = 100;\n  let skip = 0;\n  const res = await apiQuery(doc, { variables: { ...opt.variables, first: size, skip } });\n\n  if (res.pagination?.count === undefined)\n    throw new Error('Not a pagable query')\n\n  const { count } = res.pagination\n\n  const mergeProps = (res) => {\n    const props = Object.keys(res);\n\n    for (let i = 0; i < props.length; i++) {\n      const k = props[i]\n      const el = res[props[i]];\n      if (Array.isArray(el)) {\n        results[k] = !results[k] ? el : results[k].concat(el)\n      } else\n        results[k] = el;\n    }\n  }\n\n  const isRejected = (input: PromiseSettledResult<unknown>): input is PromiseRejectedResult =>\n    input.status === 'rejected'\n\n  const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>\n    input.status === 'fulfilled'\n\n  mergeProps(res)\n\n  let reqs = []\n  for (let skip = size; skip < count; skip += size) {\n    if (reqs.length < options.batchSize && skip + size < count)\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n    else {\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n\n      const data = await Promise.allSettled(reqs)\n      const error = data.find(isRejected)?.reason\n\n      if (error)\n        throw new Error(error)\n\n      for (let x = 0; x < data.length; x++) {\n        //@ts-ignore\n        mergeProps(data[x].value);\n      }\n      await new Promise(r => setTimeout(r, options.delay))\n      reqs = []\n    }\n  }\n  return results\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.method === 'GET' && req.query?.ping)\n    return res.status(200).send('pong')\n\n  if (!process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `DATOCMS_PREVIEW_SECRET env not set` })\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `Invalid token` })\n\n  if (!req.query.slug)\n    return res.status(500).json({ message: 'Invalid slug' })\n\n  const { slug } = req.query as { slug: string }\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\n\nexport default function withWebPreviews(generatePreviewUrl: (record: any) => Promise<string>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.setHeader('Content-Type', 'application/json');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    if (!req.body)\n      throw new Error('No body found in request')\n\n    const payload = req.body\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published') {\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n      }\n    }\n\n    return res.status(200).json({ previewLinks });\n  }\n}","/**\n * Multi purpose CORS lib.\n * Note: Based on the `cors` package in npm but using only\n * web APIs. Feel free to use it in your own projects.\n */\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[]\n\ntype OriginFn = (\n  origin: string | undefined,\n  req: Request\n) => StaticOrigin | Promise<StaticOrigin>\n\ninterface CorsOptions {\n  origin?: StaticOrigin | OriginFn\n  methods?: string | string[]\n  allowedHeaders?: string | string[]\n  exposedHeaders?: string | string[]\n  credentials?: boolean\n  maxAge?: number\n  preflightContinue?: boolean\n  optionsSuccessStatus?: number\n}\n\nconst defaultOptions: CorsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n}\n\nfunction isOriginAllowed(origin: string, allowed: StaticOrigin): boolean {\n  return Array.isArray(allowed)\n    ? allowed.some((o) => isOriginAllowed(origin, o))\n    : typeof allowed === 'string'\n      ? origin === allowed\n      : allowed instanceof RegExp\n        ? allowed.test(origin)\n        : !!allowed\n}\n\nfunction getOriginHeaders(reqOrigin: string | undefined, origin: StaticOrigin) {\n  const headers = new Headers()\n\n  if (origin === '*') {\n    // Allow any origin\n    headers.set('Access-Control-Allow-Origin', '*')\n  } else if (typeof origin === 'string') {\n    // Fixed origin\n    headers.set('Access-Control-Allow-Origin', origin)\n    headers.append('Vary', 'Origin')\n  } else {\n    const allowed = isOriginAllowed(reqOrigin ?? '', origin)\n\n    if (allowed && reqOrigin) {\n      headers.set('Access-Control-Allow-Origin', reqOrigin)\n    }\n    headers.append('Vary', 'Origin')\n  }\n\n  return headers\n}\n\n// originHeadersFromReq\n\nasync function originHeadersFromReq(\n  req: Request,\n  origin: StaticOrigin | OriginFn\n) {\n  const reqOrigin = req.headers.get('Origin') || undefined\n  const value =\n    typeof origin === 'function' ? await origin(reqOrigin, req) : origin\n\n  if (!value) return\n  return getOriginHeaders(reqOrigin, value)\n}\n\nfunction getAllowedHeaders(req: Request, allowed?: string | string[]) {\n  const headers = new Headers()\n\n  if (!allowed) {\n    allowed = req.headers.get('Access-Control-Request-Headers')!\n    headers.append('Vary', 'Access-Control-Request-Headers')\n  } else if (Array.isArray(allowed)) {\n    // If the allowed headers is an array, turn it into a string\n    allowed = allowed.join(',')\n  }\n  if (allowed) {\n    headers.set('Access-Control-Allow-Headers', allowed)\n  }\n\n  return headers\n}\n\nexport default async function cors(\n  req: Request,\n  res: Response,\n  options?: CorsOptions\n) {\n  const opts = { ...defaultOptions, ...options }\n  const { headers } = res\n  const originHeaders = await originHeadersFromReq(req, opts.origin ?? false)\n  const mergeHeaders = (v: string, k: string) => {\n    if (k === 'Vary') headers.append(k, v)\n    else headers.set(k, v)\n  }\n\n  // If there's no origin we won't touch the response\n  if (!originHeaders) return res\n\n  originHeaders.forEach(mergeHeaders)\n\n  if (opts.credentials) {\n    headers.set('Access-Control-Allow-Credentials', 'true')\n  }\n\n  const exposed = Array.isArray(opts.exposedHeaders)\n    ? opts.exposedHeaders.join(',')\n    : opts.exposedHeaders\n\n  if (exposed) {\n    headers.set('Access-Control-Expose-Headers', exposed)\n  }\n\n  // Handle the preflight request\n  if (req.method === 'OPTIONS') {\n    if (opts.methods) {\n      const methods = Array.isArray(opts.methods)\n        ? opts.methods.join(',')\n        : opts.methods\n\n      headers.set('Access-Control-Allow-Methods', methods)\n    }\n\n    getAllowedHeaders(req, opts.allowedHeaders).forEach(mergeHeaders)\n\n    if (typeof opts.maxAge === 'number') {\n      headers.set('Access-Control-Max-Age', String(opts.maxAge))\n    }\n\n    if (opts.preflightContinue) return res\n\n    headers.set('Content-Length', '0')\n    return new Response(null, { status: opts.optionsSuccessStatus, headers })\n  }\n\n  // If we got here, it's a normal request\n  return res\n}\n\nexport function initCors(options?: CorsOptions) {\n  return (req: Request, res: Response) => cors(req, res, options)\n}","import { NextRequest, NextResponse } from \"next/server.js\";\nimport cors from '../utils/cors.js'\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\nexport default function withWebPreviewsEdge(generatePreviewUrl: (record: any) => Promise<string>): (req: NextRequest, res: NextResponse) => void {\n\n  const corsOptions = {\n    origin: '*',\n    methods: ['POST', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    preflightContinue: false,\n  }\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (req.method === 'OPTIONS')\n      return cors(req, new Response('ok', { status: 200 }), corsOptions)\n\n    const payload = await req.json()\n\n    if (!payload)\n      throw new Error('No form data in request body')\n\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n\n      if (process.env.DATOCMS_PREVIEW_SECRET && payload?.item?.meta?.status !== 'published') {\n        previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n      }\n    }\n\n    return cors(\n      req,\n      new Response(JSON.stringify({ previewLinks }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      }), corsOptions)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n    throw new Error('BASIC_AUTH_USER or BASIC_AUTH_PASSWORD not set in .env')\n\n  const basicAuth = req.headers.authorization\n\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.entity?.relationships?.item_type?.data?.id\n  const eventType = payload?.event_type\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const model = await client.itemTypes.find(modelId)\n\n  try {\n    const record = await client.items.find(payload.entity.id, { version: 'current' })\n\n    if (!record && eventType !== 'delete')\n      throw `No record found with modelId: ${modelId} (${model.api_key})`\n\n    return { ...record, model }\n  } catch (err) {\n\n    const isDeleted = err.response?.status === 404 && (eventType === 'delete' || eventType === 'unpublish');\n\n    if (isDeleted)\n      return { id: payload.entity.id, ...payload.entity.attributes, model }\n    else\n      throw err;\n  }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'GET' && req.query?.ping)\n      return res.status(200).send('pong')\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body;\n\n    if (!payload || !payload.entity)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n    record._payload = payload.entity\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths || !paths.length)\n          throw 'Nothing to revalidate';\n\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        //console.error(err)\n        console.log('error when revalidating')\n        console.log(err)\n        return res.json({ revalidated: false, err })\n      }\n    })\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void, options?: { username: string, password: string }): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    const basicAuth = req.headers.authorization\n\n    if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n      throw new Error('Basic auth not set up in .env')\n\n    if (!basicAuth || !process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\nimport withBasicAuth from './withBasicAuth.js';\nimport { buildClient } from '@datocms/cma-client';\n\nconst withBackup = withBasicAuth(async (req: NextApiRequest, res: NextApiResponse) => {\n\n  if (!process.env.DATOCMS_ENVIRONMENT)\n    return res.status(500).send('DATOCMS_ENVIRONMENT not set in .env')\n  if (!process.env.DATOCMS_API_TOKEN)\n    return res.status(500).send('DATOCMS_API_TOKEN not set in .env')\n\n  const maxBackups = req.query.max ? parseInt(req.query.max as string) : 1\n  const backupPrefix = 'auto-backup-'\n  const client = buildClient({ environment: process.env.DATOCMS_ENVIRONMENT, apiToken: process.env.DATOCMS_API_TOKEN, requestTimeout: 3000 })\n  const backups = (await client.environments.list()).filter(e => e.id.startsWith('auto-backup') && e.meta.primary === false).sort((a, b) => a.id.replace(backupPrefix, '') > b.id.replace(backupPrefix, '') ? -1 : 1)\n  const today = new Date().toISOString().replace('T', '-').replaceAll(':', '-').replace('Z', '').split('.')[0]\n  const name = `auto-backup-${today}`\n\n  console.log('Last backup was: ', backups[0]?.id ?? 'none')\n  console.log('Max backups: ', maxBackups)\n  console.log('Creating backup...', name)\n\n  try {\n\n    await client.environments.fork(process.env.DATOCMS_ENVIRONMENT, { id: name }, {\n      immediate_return: false,\n      fast: false,\n      force: true\n    })\n\n    for (let i = 0; i < backups.reverse().slice(maxBackups - 1).length; i++) {\n      try {\n        console.log('Deleting old backup...', backups[i].id)\n        await client.environments.destroy(backups[i].id)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    console.log('Backup done!')\n    return res.status(200).send(`Backup done ${process.env.DATOCMS_ENVIRONMENT} > ${name}`)\n  } catch (e) {\n    console.error(e)\n    return res.status(500).send(`Backup failed: ${e.message}`)\n  }\n\n\n\n})\n\nexport default withBackup","import type { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withBasicAuthEdge(callback: (req: NextRequest, res: NextResponse) => void, options?: { username: string, password: string }): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    const basicAuth = req.headers.get('authorization')\n\n    if (!basicAuth)\n      return new Response('Access denied', { status: 401 })\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return new Response('Access denied. Wrong password or username.', { status: 401 })\n\n    return callback(req, res)\n  }\n}"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","_ref","_process$env$DATOCMS_","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","requestName","queries","Array","isArray","map","op","operationName","join","Promise","resolve","then","response","t","Date","getTime","_extends","text","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","withGlobalProps","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","model","context","apiQuery","options","_ref2","variables","_ref2$preview","Error","client","setLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref4","message","res","_catch","err","props","gql","withPreview","req","_req$query","method","ping","status","send","DATOCMS_PREVIEW_SECRET","json","secret","slug","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","withWebPreviews","generatePreviewUrl","NEXT_PUBLIC_SITE_URL","SITE_URL","setHeader","payload","previewLinks","path","_path","baseUrl","url","URL","origin","pathname","label","item","_payload$item$meta","_payload$item","meta","cors","methods","opts","originHeadersFromReq","_opts$origin","originHeaders","v","k","append","set","mergeHeaders","credentials","exposed","exposedHeaders","allowed","Headers","get","getAllowedHeaders","allowedHeaders","String","preflightContinue","Response","optionsSuccessStatus","value","reqOrigin","isOriginAllowed","getOriginHeaders","_temp2","some","o","RegExp","test","withWebPreviewsEdge","corsOptions","stringify","withRevalidate","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","basicAuth","authorization","auth","split","Buffer","from","pwd","_Buffer$from$toString","entity","recordFromPayload","_payload$entity","_payload$entity$relat","_payload$entity$relat2","_payload$entity$relat3","modelId","relationships","item_type","eventType","event_type","buildClient","requestTimeout","itemTypes","find","items","version","record","api_key","_err$response","attributes","_payload","paths","p","revalidated","username","password","withBackup","withBasicAuth","DATOCMS_API_TOKEN","maxBackups","max","backupPrefix","environment","environments","list","_client$environments$","_backups$0$id","_backups$","backups","primary","sort","a","b","replace","name","toISOString","replaceAll","fork","immediate_return","fast","force","_temp3","i","_for","reverse","slice","destroy","state","_Pact","prototype","onFulfilled","onRejected","this","s","_settle","_this","withBasicAuthEdge"],"mappings":"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"}