{"version":3,"file":"index.modern.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50,\n  headers: { \n    'Authorization': `Bearer ${GRAPHQL_API_TOKEN}`\n  }\n}\n\nconst link = new BatchHttpLink(linkConfig)\nconst previewLink = new BatchHttpLink({...linkConfig, headers:{...linkConfig.headers, 'X-Include-Drafts': true}})\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","async","input","init","queries","JSON","parse","body","toString","undefined","Array","isArray","map","op","operationName","join","response","t","Date","getTime","result","text","console","log","requestName","batchMax","batchInterval","headers","Authorization","link","BatchHttpLink","previewLink","_extends","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","_t","opt","callback","revalidate","parseInt","REVALIDATE_TIME","GlobalQuery","push","apply","seo","gql","props","options","variables","preview","Error","setLink","batch","q","idx","vars","length","data","Promise","all","filter","errors","forEach","e","message","errorMessages","res","err","apiQuery","context","withPreview","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","withRevalidate","basicAuth","authorization","auth","split","user","pwd","Buffer","from","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","_req$body","entity","payload","record","modelId","_payload$relationship","relationships","_payload$relationship2","item_type","_payload$relationship3","id","buildClient","apiToken","requestTimeout","model","itemTypes","list","find","m","items","type","api_key","fields","eq","recordFromPayload","paths","p","revalidated"],"mappings":"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"}