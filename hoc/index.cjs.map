{"version":3,"file":"index.cjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_API_TOKEN","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","requestName","queries","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","Promise","resolve","result","console","log","e","reject","batchMax","batchInterval","preview","apiToken","headers","Authorization","BatchHttpLink","linkConfig","link","createLink","previewLink","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","context","apiQuery","options","variables","_ref","_ref$preview","Error","client","setLink","q","idx","length","vars","all","batch","then","data","filter","errors","_ref2","forEach","_ref3","message","errorMessages","res","_catch","err","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","auth","split","_Buffer$from$toString","Buffer","from","pwd","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"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"}