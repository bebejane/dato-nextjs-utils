{"version":3,"file":"index.cjs","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport { loadEnvConfig } from '@next/env'\n\nloadEnvConfig(process.env.PWD)\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["loadEnvConfig","process","env","PWD","_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","requestName","queries","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","_extends","text","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","linkConfig","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","callback","req","res","authorization","basicAuth","status","send","auth","split","Buffer","from","pwd","BASIC_AUTH_USER","_Buffer$from$toString","BASIC_AUTH_PASSWORD","isAuthorized","opt","id","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","context","apiQuery","options","variables","_ref","_ref$preview","Error","client","setLink","previewLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","err","props","withPreview","secret","DATOCMS_PREVIEW_SECRET","slug","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","_req$body","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","then","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated","_catch"],"mappings":"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"}