{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ( filter: { id: { eq: \"${id}\" } }) {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","t","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","previewLink","client","ApolloClient","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","id","context","options","variables","_ref$preview","Error","resolve","setLink","q","idx","length","vars","all","batch","data","errorMessages","filter","errors","forEach","message","res","_catch","err","apiQuery","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"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"}