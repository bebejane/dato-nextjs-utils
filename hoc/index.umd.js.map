{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true,\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","operations","queries","Array","isArray","map","op","operationName","join","then","response","Date","getTime","text","result","console","log","requestName","t","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","BatchHttpLink","_extends","link","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","opt","callback","id","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","context","apiQuery","options","variables","_ref$preview","Error","resolve","setLink","previewLink","batch","q","idx","vars","length","all","data","errorMessages","filter","errors","forEach","_ref3","message","res","_catch","err","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","auth","split","_Buffer$from$toString","Buffer","from","pwd","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"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"}