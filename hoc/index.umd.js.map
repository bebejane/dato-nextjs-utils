{"version":3,"file":"index.umd.js","sources":["../src/hoc/withGlobalProps.ts","../src/api/index.ts","../src/utils/cors.ts","../src/hoc/withRevalidate.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withBackup.ts","../src/hoc/withFavicon.ts","../src/hoc/withTests.ts","../src/hoc/withCors.ts","../src/hoc/withVercelCronAuthEdge.ts","../src/hoc/withBackupEdge.ts","../src/hoc/withBasicAuthEdge.ts","../src/hoc/withPreview.ts","../src/hoc/withVercelCronAuth.ts","../src/hoc/withWebPreviews.ts","../src/hoc/withWebPreviewsEdge.ts"],"sourcesContent":["import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.DATOCMS_ENVIRONMENT ?? process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT ?? 'main'\nconst GRAPHQL_INCLUDE_DRAFTS = process.env.DATOCMS_INCLUDE_DRAFTS ? process.env.DATOCMS_INCLUDE_DRAFTS === 'true' ? true : false : false\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': 'true'\n  }\n\n  const includeDrafts = preview || GRAPHQL_INCLUDE_DRAFTS\n  if (includeDrafts)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const checkIsPaganationQuery = (doc: TypedDocumentNode): boolean => {\n  const operation = doc.definitions.find((d) => d.kind === 'OperationDefinition')\n\n  if (!operation)\n    throw new Error('Not a pagable query. Missing operation definition')\n\n  const { selectionSet, variableDefinitions } = operation as any\n\n  if (!selectionSet.selections.find((s) => s.alias?.value === 'pagination'))\n    throw new Error('Not a pagable query. Missing pagination field')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'first'))\n    throw new Error('Not a pagable query. Missing $first variable')\n  if (!variableDefinitions.find((v) => v.variable.name.value === 'skip'))\n    throw new Error('Not a pagable query. Missing $skip variable')\n\n  return true\n}\n\nexport const apiQueryAll = async (doc: TypedDocumentNode, opt: ApiQueryOptions = {}, options = { batchSize: 50, delay: 100 }): Promise<any> => {\n\n  checkIsPaganationQuery(doc)\n\n  const results = {}\n  let size = 100;\n  let skip = 0;\n\n  const res = await apiQuery(doc, { variables: { ...opt.variables, first: size, skip } });\n\n  if (res.pagination?.count === undefined)\n    throw new Error('Not a pagable query')\n\n  const { count } = res.pagination\n\n  const mergeProps = (res) => {\n    const props = Object.keys(res);\n\n    for (let i = 0; i < props.length; i++) {\n      const k = props[i]\n      const el = res[props[i]];\n      if (Array.isArray(el)) {\n        results[k] = !results[k] ? el : results[k].concat(el)\n      } else\n        results[k] = el;\n    }\n  }\n\n  const isRejected = (input: PromiseSettledResult<unknown>): input is PromiseRejectedResult =>\n    input.status === 'rejected'\n\n  const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>\n    input.status === 'fulfilled'\n\n  mergeProps(res)\n\n  let reqs = []\n  for (let skip = size; skip < count; skip += size) {\n    if (reqs.length < options.batchSize && skip + size < count)\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n    else {\n      reqs.push(apiQuery(doc, { variables: { ...opt.variables, first: size, skip } }))\n\n      const data = await Promise.allSettled(reqs)\n      const error = data.find(isRejected)?.reason\n\n      if (error)\n        throw new Error(error)\n\n      for (let x = 0; x < data.length; x++) {\n        //@ts-ignore\n        mergeProps(data[x].value);\n      }\n      await new Promise(r => setTimeout(r, options.delay))\n      reqs = []\n    }\n  }\n  return results\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","/**\n * Multi purpose CORS lib.\n * Note: Based on the `cors` package in npm but using only\n * web APIs. Feel free to use it in your own projects.\n */\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[]\n\ntype OriginFn = (\n  origin: string | undefined,\n  req: Request\n) => StaticOrigin | Promise<StaticOrigin>\n\ninterface CorsOptions {\n  origin?: StaticOrigin | OriginFn\n  methods?: string | string[]\n  allowedHeaders?: string | string[]\n  exposedHeaders?: string | string[]\n  credentials?: boolean\n  maxAge?: number\n  preflightContinue?: boolean\n  optionsSuccessStatus?: number\n}\n\nconst defaultOptions: CorsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n}\n\nfunction isOriginAllowed(origin: string, allowed: StaticOrigin): boolean {\n  return Array.isArray(allowed)\n    ? allowed.some((o) => isOriginAllowed(origin, o))\n    : typeof allowed === 'string'\n      ? origin === allowed\n      : allowed instanceof RegExp\n        ? allowed.test(origin)\n        : !!allowed\n}\n\nfunction getOriginHeaders(reqOrigin: string | undefined, origin: StaticOrigin) {\n  const headers = new Headers()\n\n  if (origin === '*') {\n    // Allow any origin\n    headers.set('Access-Control-Allow-Origin', '*')\n  } else if (typeof origin === 'string') {\n    // Fixed origin\n    headers.set('Access-Control-Allow-Origin', origin)\n    headers.append('Vary', 'Origin')\n  } else {\n    const allowed = isOriginAllowed(reqOrigin ?? '', origin)\n\n    if (allowed && reqOrigin) {\n      headers.set('Access-Control-Allow-Origin', reqOrigin)\n    }\n    headers.append('Vary', 'Origin')\n  }\n\n  return headers\n}\n\n// originHeadersFromReq\n\nasync function originHeadersFromReq(\n  req: Request,\n  origin: StaticOrigin | OriginFn\n) {\n  const reqOrigin = req.headers.get('Origin') || undefined\n  const value =\n    typeof origin === 'function' ? await origin(reqOrigin, req) : origin\n\n  if (!value) return\n  return getOriginHeaders(reqOrigin, value)\n}\n\nfunction getAllowedHeaders(req: Request, allowed?: string | string[]) {\n  const headers = new Headers()\n\n  if (!allowed) {\n    allowed = req.headers.get('Access-Control-Request-Headers')!\n    headers.append('Vary', 'Access-Control-Request-Headers')\n  } else if (Array.isArray(allowed)) {\n    // If the allowed headers is an array, turn it into a string\n    allowed = allowed.join(',')\n  }\n  if (allowed) {\n    headers.set('Access-Control-Allow-Headers', allowed)\n  }\n\n  return headers\n}\n\nexport default async function cors(\n  req: Request,\n  res: Response,\n  options?: CorsOptions\n) {\n  const opts = { ...defaultOptions, ...options }\n  const { headers } = res\n  const originHeaders = await originHeadersFromReq(req, opts.origin ?? false)\n  const mergeHeaders = (v: string, k: string) => {\n    if (k === 'Vary') headers.append(k, v)\n    else headers.set(k, v)\n  }\n\n  // If there's no origin we won't touch the response\n  if (!originHeaders) return res\n\n  originHeaders.forEach(mergeHeaders)\n\n  if (opts.credentials) {\n    headers.set('Access-Control-Allow-Credentials', 'true')\n  }\n\n  const exposed = Array.isArray(opts.exposedHeaders)\n    ? opts.exposedHeaders.join(',')\n    : opts.exposedHeaders\n\n  if (exposed) {\n    headers.set('Access-Control-Expose-Headers', exposed)\n  }\n\n  // Handle the preflight request\n  if (req.method === 'OPTIONS') {\n    if (opts.methods) {\n      const methods = Array.isArray(opts.methods)\n        ? opts.methods.join(',')\n        : opts.methods\n\n      headers.set('Access-Control-Allow-Methods', methods)\n    }\n\n    getAllowedHeaders(req, opts.allowedHeaders).forEach(mergeHeaders)\n\n    if (typeof opts.maxAge === 'number') {\n      headers.set('Access-Control-Max-Age', String(opts.maxAge))\n    }\n\n    if (opts.preflightContinue) return res\n\n    headers.set('Content-Length', '0')\n    return new Response(null, { status: opts.optionsSuccessStatus, headers })\n  }\n\n  // If we got here, it's a normal request\n  return res\n}\n\nexport function initCors(options?: CorsOptions) {\n  return (req: Request, res: Response) => cors(req, res, options)\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'GET' && req.query?.ping)\n      return res.status(200).send('pong')\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body;\n\n    if (!payload || !payload?.entity)\n      return res.status(400).send('Payload empty or missing entity')\n\n    const { entity, related_entities, event_type } = payload\n    const model = related_entities.find(({ id }) => id === entity.relationships?.item_type?.data?.id)\n\n    if (!model)\n      return res.status(400).send('Model not found in payload')\n\n    const record = { id: entity.id, ...entity.attributes, model: model.attributes }\n    const delay = Date.now() - Math.max(new Date(entity.meta.updated_at).getTime(), new Date(entity.meta.published_at).getTime(), new Date(entity.meta.created_at).getTime())\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths)\n          return res.status(400).send('Nothing to revalidate. Paths empty')\n\n        if (paths.length === 0)\n          return res.status(200).json({ revalidated: false, paths, delay, event_type })\n\n        for (const path of paths) {\n          try {\n            await res.revalidate(path)\n          } catch (err) {\n            console.error(err)\n            console.log('Error revalidating', path)\n            throw err\n          }\n        }\n\n        console.log(`revalidate${delay && !['unpublish', 'delete'].includes(event_type) ? ` (${delay}ms)` : ''} ${event_type}`, paths)\n\n        return res.status(200).json({ revalidated: true, paths, delay, event_type })\n      } catch (err) {\n        console.log('Error revalidating', paths)\n        //console.error(err)\n        return res.status(200).json({ revalidated: false, paths, err: err.message, delay, event_type })\n      }\n    })\n  }\n}\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n    throw new Error('BASIC_AUTH_USER or BASIC_AUTH_PASSWORD not set in .env')\n\n  const basicAuth = req.headers.authorization\n\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void, options?: { username: string, password: string }): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    if (process.env.NODE_ENV === 'development')\n      return callback(req, res)\n\n    const basicAuth = req.headers.authorization\n\n    if (!process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD)\n      throw new Error('Basic auth not set up in .env')\n\n    if (!basicAuth || !process.env.BASIC_AUTH_USER || !process.env.BASIC_AUTH_PASSWORD) {\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"NodeJs\", charset=\"UTF-8\"')\n      return res.status(401).send('Access denied')\n    }\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from 'next'\nimport withBasicAuth from './withBasicAuth.js';\nimport { buildClient } from '@datocms/cma-client';\n\nconst withBackup = withBasicAuth(async (req: NextApiRequest, res: NextApiResponse) => {\n\n  if (!process.env.DATOCMS_ENVIRONMENT)\n    return res.status(500).send('DATOCMS_ENVIRONMENT not set in .env')\n  if (!process.env.DATOCMS_API_TOKEN)\n    return res.status(500).send('DATOCMS_API_TOKEN not set in .env')\n\n  try {\n\n    const maxBackups = req.query.max ? parseInt(req.query.max as string) : 1\n    const backupPrefix = 'auto-backup-'\n    const client = buildClient({ environment: process.env.DATOCMS_ENVIRONMENT, apiToken: process.env.DATOCMS_API_TOKEN, requestTimeout: 3000 })\n    const backups = (await client.environments.list()).filter(e => e.id.startsWith('auto-backup') && e.meta.primary === false).sort((a, b) => a.id.replace(backupPrefix, '') > b.id.replace(backupPrefix, '') ? -1 : 1)\n    const today = new Date().toISOString().replace('T', '-').replaceAll(':', '-').replace('Z', '').split('.')[0]\n    const name = `auto-backup-${today}`\n\n    console.log('Last backup was: ', backups[0]?.id ?? 'none')\n    console.log('Max backups: ', maxBackups)\n    console.log('Creating backup...', name)\n\n    await client.environments.fork(process.env.DATOCMS_ENVIRONMENT, { id: name }, {\n      immediate_return: false,\n      fast: true,\n      force: true\n    })\n\n    for (let i = 0; i < backups.reverse().slice(maxBackups - 1).length; i++) {\n      try {\n        console.log('Deleting old backup...', backups[i].id)\n        await client.environments.destroy(backups[i].id)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    console.log('Backup done!')\n    return res.status(200).send(`Backup done ${process.env.DATOCMS_ENVIRONMENT} > ${name}`)\n  } catch (e) {\n    console.log(e)\n    return res.status(500).send(`Backup failed: ${e.message}`)\n  }\n\n})\n\nexport default withBackup\nexport const maxDuration = 30;\n","import { GetServerSideProps } from \"next\";\n\nexport const withFavicon: GetServerSideProps = async function ({ res }) {\n\n  if (!process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN)\n    return { notFound: true }\n\n  const query = await fetch('https://graphql.datocms.com/', {\n    method: 'POST',\n    body: JSON.stringify({\n      query:\n        `query Site {\n          site: _site {\n            favicon{\n              url\n              mimeType\n            }\n          }\n        }\n    `}),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accepts': 'application/json',\n      'Authorization': process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n    }\n  })\n\n  const { data: { site } } = await query.json() as { data: { site: any } }\n\n  if (!site?.favicon.url)\n    return { notFound: true }\n\n  const reader = (await fetch(site.favicon.url)).body.getReader()\n\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done)\n      break;\n    res.write(value)\n  }\n\n  res.end()\n\n  return {\n    props: {},\n  };\n}\n\nexport default withFavicon","import type { NextApiRequest, NextApiResponse } from 'next'\nimport withBasicAuth from './withBasicAuth.js';\nimport withCors from './withCors.js';\nimport { Client, buildClient } from '@datocms/cma-client';\nimport { ItemType } from '@datocms/cma-client/dist/types/generated/SimpleSchemaTypes.js';\n\nconst withTests = withCors(withBasicAuth(async (req: NextApiRequest, res: NextApiResponse) => {\n\n  const results = await testApiEndpoints()\n\n  if (req.query?.json) {\n    res.setHeader('Content-Type', 'application/json')\n    res.status(200).json(results)\n  } else if (req.query.text) {\n    res.setHeader('Content-Type', 'text/plain')\n    res.status(200).send(testResultsToString(results))\n  } else {\n    res.setHeader('Content-Type', 'text/html')\n    res.status(200).send(testResultsToHtml(results))\n  }\n}))\n\nexport default withTests\n\nconst baseApiUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api`\n\ntype PreviewLink = {\n  label: string\n  url: string\n}\n\ntype RevalidateResponse = {\n  revalidated: boolean,\n  paths: string[]\n  delays: number\n  event_type: string\n}\n\ntype TestResult = {\n  model: string\n  previews?: PreviewLink[]\n  revalidate?: RevalidateResponse\n}\n\nexport async function testApiEndpoints() {\n\n  const client = buildClient({ apiToken: process.env.DATOCMS_API_TOKEN })\n  const site = await client.site.find()\n\n  console.log(`Testing site: ${site.name}`)\n\n  const itemTypes = await client.itemTypes.list()\n  const models = itemTypes.filter(t => !t.modular_block)\n\n  const results = await Promise.all(models.map(async (model, i) => {\n\n    const r: TestResult = { model: model.api_key }\n    console.log(`${i + 1}/${models.length}: ${r.model}`)\n\n    try {\n      const previews = await testWebPreviewsEndpoint(model, client)\n      if (previews.length > 0) {\n        r.previews = previews\n      }\n    } catch (e) { }\n\n    try {\n      r.revalidate = await testRevalidateEndpoint(model, client)\n    } catch (e) { }\n\n    return r\n  }))\n\n  return results.sort((a, b) => a.model > b.model ? 1 : -1)\n}\n\nexport const testResultsToString = (results: TestResult[]) => {\n  const tests = results.map(r => {\n    return `${r.model} - Previews: ${r.previews ? 'YES' : 'NO'} / Revalidate: ${r.revalidate ? 'YES' : 'NO'}`\n  }).join('\\n')\n\n  const previews = results.filter(r => r.previews).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const revalidate = results.filter(r => r.revalidate?.paths.length).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const nopreviews = results.filter(r => !r.previews).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n  const norevalidate = results.filter(r => !r.revalidate || !r.revalidate?.paths.length).map(r => r.model).sort((a, b) => a > b ? 1 : -1).join('\\n')\n\n  return `WEB PREVIEWS\\n${previews}\\n\\nNO WEB PREVIEWS:\\n${nopreviews}\\n\\nREVALIDATE\\n${revalidate}\\n\\nNO REVALIDATE\\n${norevalidate}`\n\n}\n\nexport const testResultsToHtml = (results: TestResult[]) => {\n  return `\n    <html>\n      <head>\n        <style>\n          table {\n            border-collapse: collapse;\n            width: 400px;\n          }\n          th, td {\n            padding: 5px;\n            text-align:left;\n          }\n          .center{\n            text-align:center;\n          }\n          .error{\n            color:red;\n          }\n        </style>\n      </head>\n      <body>\n        <pre>\n        <table>\n          <thead>\n            <tr>\n              <th>Model</th>\n              <th>Web Previews</th>\n              <th>Revalidate</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${results.map(r => `\n              <tr \n                title=\"Web Previews\\n-----------\\n${!r.previews ? '' : r.previews?.map(p => `${p.label}: ${p.url}`).join('\\n')}\\n\\nRevalidate\\n-----------\\n${!r.revalidate ? '' : r.revalidate?.paths?.join('\\n')}\"\n                class=\"${!r.previews || !r.revalidate?.revalidated ? 'error' : ''}\"\n              >\n                <td>${r.model}</td>\n                <td class=\"center\">${r.previews ? 'x' : '-'}</td>\n                <td class=\"center\">${r.revalidate?.revalidated ? 'x' : '-'}</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </pre>\n      </body>\n    </html>\n  `\n}\n\nconst testWebPreviewsEndpoint = async (itemType: ItemType, client: Client): Promise<PreviewLink[]> => {\n\n  const item = (await client.items.list({ filter: { type: itemType.api_key } }))[0]\n  const res = await fetch(`${baseApiUrl}/web-previews`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Basic ${btoa(`${process.env.BASIC_AUTH_USER}:${process.env.BASIC_AUTH_PASSWORD}`)}`\n    },\n    body: JSON.stringify({\n      item: {\n        attributes: item || {}\n      },\n      itemType: {\n        attributes: itemType\n      },\n      environmentId: \"main\",\n      locale: \"en\"\n    })\n  })\n\n  const json = await res.json()\n  return json.previewLinks\n\n}\n\nconst testRevalidateEndpoint = async (itemType: ItemType, client: Client): Promise<RevalidateResponse> => {\n\n  const item = (await client.items.list({ filter: { type: itemType.api_key } }))[0]\n  const res = await fetch(`${baseApiUrl}/revalidate`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Basic ${btoa(`${process.env.BASIC_AUTH_USER}:${process.env.BASIC_AUTH_PASSWORD}`)}`\n    },\n    body: JSON.stringify({\n      \"environment\": \"main\",\n      \"entity_type\": \"item\",\n      \"event_type\": \"update\",\n      \"entity\": {\n        \"id\": item.id,\n        \"type\": \"item\",\n        \"attributes\": {\n          ...item || {}\n        },\n        \"relationships\": {\n          \"item_type\": {\n            \"data\": {\n              \"id\": itemType.id,\n              \"type\": \"item_type\"\n            }\n          }\n        },\n        \"meta\": {\n          ...item.meta,\n          \"updated_at\": new Date().toISOString(),\n          \"published_at\": new Date().toISOString(),\n          \"created_at\": new Date().toISOString()\n        }\n      },\n      \"related_entities\": [\n        {\n          \"id\": itemType.id,\n          \"type\": \"item_type\",\n          \"attributes\": itemType\n        }\n      ],\n    })\n  })\n  if (res.status === 200) {\n    const json = await res.json()\n    return json\n  } else {\n    throw new Error(`Error testing revalidate endpoint: ${res.status} ${res.statusText}`)\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withCors(callback: (req: NextApiRequest, res: NextApiResponse) => void, options?: { origin: string, methods: string[] }): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n    res.setHeader('Access-Control-Allow-Origin', options?.origin || '*');\n    res.setHeader('Access-Control-Allow-Methods', options?.methods?.join(',') || 'POST,GET,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    return callback(req, res)\n  }\n}\n\n\n","import { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withVercelCronAuthEdge(callback: (req: NextRequest, res: NextResponse) => void): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n    if (!process.env.CRON_SECRET)\n      throw new Error('CRON_SECRET not set in .env')\n\n    if (req.headers.get('authorization') === `Bearer ${process.env.CRON_SECRET}`)\n      return callback(req, res)\n    else\n      return new Response('Access denied', { status: 401 })\n  }\n}","import type { NextRequest, NextResponse } from 'next/server.js'\nimport withVercelCronAuthEdge from './withVercelCronAuthEdge.js';\nimport { buildClient } from '@datocms/cma-client-browser';\n\nconst withBackupEdge = withVercelCronAuthEdge(async (req: NextRequest, res: NextResponse) => {\n\n  if (!process.env.DATOCMS_ENVIRONMENT)\n    throw new Error('DATOCMS_ENVIRONMENT not set in .env')\n  if (!process.env.DATOCMS_API_TOKEN)\n    throw new Error('DATOCMS_API_TOKEN not set in .env')\n\n  try {\n    const params = new URLSearchParams(req.nextUrl.searchParams)\n    const maxBackups = params.get('max') ? parseInt(params.get('max') as string) : 1\n    const backupPrefix = 'auto-backup-'\n    const client = buildClient({ environment: process.env.DATOCMS_ENVIRONMENT, apiToken: process.env.DATOCMS_API_TOKEN, requestTimeout: 3000 })\n    const backups = (await client.environments.list()).filter(e => e.id.startsWith('auto-backup') && e.meta.primary === false).sort((a, b) => a.id.replace(backupPrefix, '') > b.id.replace(backupPrefix, '') ? -1 : 1)\n    const today = new Date().toISOString().replace('T', '-').replaceAll(':', '-').replace('Z', '').split('.')[0]\n    const name = `auto-backup-${today}`\n\n    console.log('Last backup was: ', backups[0]?.id ?? 'none')\n    console.log('Max backups: ', maxBackups)\n    console.log('Creating backup...', name)\n\n    await client.environments.fork(process.env.DATOCMS_ENVIRONMENT, { id: name }, {\n      immediate_return: false,\n      fast: true,\n      force: true\n    })\n\n    for (let i = 0; i < backups.reverse().slice(maxBackups - 1).length; i++) {\n      try {\n        console.log('Deleting old backup...', backups[i].id)\n        await client.environments.destroy(backups[i].id)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    console.log('Backup done!')\n    return new Response(`Backup done ${process.env.DATOCMS_ENVIRONMENT} > ${name}`, { status: 200 })\n  } catch (e) {\n    console.log(e)\n    return new Response(`Backup failed: ${e.message}`, { status: 500 })\n  }\n})\n\nexport default withBackupEdge","import type { NextRequest, NextResponse } from 'next/server.js'\n\nexport default function withBasicAuthEdge(callback: (req: NextRequest, res: NextResponse) => void, options?: { username: string, password: string }): (req: NextRequest, res: NextResponse) => void {\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (req.method === 'OPTIONS')\n      return callback(req, res)\n\n    const basicAuth = req.headers.get('authorization')\n\n    if (!basicAuth)\n      return new Response('Access denied', { status: 401 })\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const username = options?.username || process.env.BASIC_AUTH_USER\n    const password = options?.password || process.env.BASIC_AUTH_PASSWORD\n    const isAuthorized = user === username && pwd === password\n\n    if (!isAuthorized)\n      return new Response('Access denied. Wrong password or username.', { status: 401 })\n\n    return callback(req, res)\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.method === 'GET' && req.query?.ping)\n    return res.status(200).send('pong')\n\n  if (!process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `DATOCMS_PREVIEW_SECRET env not set` })\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET)\n    return res.status(500).json({ message: `Invalid token` })\n\n  if (!req.query.slug)\n    return res.status(500).json({ message: 'Invalid slug' })\n\n  const { slug } = req.query as { slug: string }\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 3 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next/types'\n\nexport default function withVercelCronAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.CRON_SECRET)\n      throw new Error('CRON_SECRET not set in .env')\n\n    if (req.headers?.authorization === `Bearer ${process.env.CRON_SECRET}`)\n      return callback(req, res)\n    else\n      return res.status(401).send('Access denied')\n  }\n}","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\n\nexport default function withWebPreviews(generatePreviewUrl: (record: any) => Promise<string | null>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (!process.env.DATOCMS_PREVIEW_SECRET)\n      throw new Error('DATOCMS_PREVIEW_SECRET is not set in .env')\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.setHeader('Content-Type', 'application/json');\n\n    if (req.method === 'OPTIONS')\n      return res.status(200).send('ok');\n\n    if (!req.body)\n      throw new Error('No body found in request')\n\n    const payload = req.body\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return res.status(200).json({ previewLinks });\n  }\n}","import { NextRequest, NextResponse } from \"next/server.js\";\nimport cors from '../utils/cors.js'\n\nexport type PreviewLink = {\n  label: string\n  url: string\n}\n\nexport default function withWebPreviewsEdge(generatePreviewUrl: (record: any) => Promise<string | null>): (req: NextRequest, res: NextResponse) => void {\n\n  const corsOptions = {\n    origin: '*',\n    methods: ['POST', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    preflightContinue: false,\n  }\n\n  return async (req: NextRequest, res: NextResponse) => {\n\n    if (!process.env.NEXT_PUBLIC_SITE_URL && !process.env.SITE_URL)\n      throw new Error('NEXT_PUBLIC_SITE_URL is not set in .env')\n\n    if (!process.env.DATOCMS_PREVIEW_SECRET)\n      throw new Error('DATOCMS_PREVIEW_SECRET is not set in .env')\n\n    if (req.method === 'OPTIONS')\n      return cors(req, new Response('ok', { status: 200 }), corsOptions)\n\n    const payload = await req.json()\n\n    if (!payload)\n      throw new Error('No form data in request body')\n\n    const previewLinks = []\n    let path = await generatePreviewUrl(payload);\n    let baseUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.SITE_URL\n    const isExternal = path?.startsWith('https://')\n\n    if (isExternal) {\n      const url = new URL(path)\n      baseUrl = url.origin\n      path = url.pathname\n    }\n\n    if (path) {\n      previewLinks.push({ label: 'Live', url: `${baseUrl}${path}` })\n      previewLinks.push({ label: 'Preview', url: `${baseUrl}/api/preview?slug=${path}&secret=${process.env.DATOCMS_PREVIEW_SECRET}` })\n    }\n\n    return cors(\n      req,\n      new Response(JSON.stringify({ previewLinks }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      }), corsOptions)\n  }\n}"],"names":["_templateObject","isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","_ref","_process$env$DATOCMS_","DATOCMS_ENVIRONMENT","NEXT_PUBLIC_DATOCMS_ENVIRONMENT","GRAPHQL_INCLUDE_DRAFTS","DATOCMS_INCLUDE_DRAFTS","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","Promise","resolve","response","t","Date","getTime","_extends","text","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","headers","Authorization","BatchHttpLink","link","previewLink","client","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","cors","req","res","options","methods","opts","originHeadersFromReq","origin","_opts$origin","originHeaders","v","k","append","set","forEach","mergeHeaders","credentials","exposed","exposedHeaders","method","allowed","Headers","get","getAllowedHeaders","allowedHeaders","maxAge","String","preflightContinue","Response","status","optionsSuccessStatus","value","reqOrigin","isOriginAllowed","getOriginHeaders","then","_temp2","some","o","RegExp","test","pact","state","s","_Pact","_settle","bind","onFulfilled","onRejected","this","callback","_this","withBasicAuth","NODE_ENV","authorization","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","Error","basicAuth","setHeader","send","auth","split","Buffer","from","username","password","pwd","withBackup","DATOCMS_API_TOKEN","_catch","maxBackups","max","parseInt","backupPrefix","buildClient","environment","requestTimeout","environments","list","_client$environments$","_backups$0$id","_backups$","backups","filter","id","startsWith","meta","primary","sort","a","b","replace","name","toISOString","replaceAll","fork","immediate_return","fast","force","i","_for","reverse","slice","length","_temp","destroy","error","message","prototype","withTests","site","find","itemTypes","models","modular_block","all","model","_temp4","testRevalidateEndpoint","_testRevalidateEndpoi","r","revalidate","api_key","_temp5","testWebPreviewsEndpoint","previews","results","testApiEndpoints","_req$query","json","testResultsToString","testResultsToHtml","baseApiUrl","NEXT_PUBLIC_SITE_URL","_r$revalidate","paths","_r$revalidate2","_r$previews","_r$revalidate3","_r$revalidate3$paths","_r$revalidate4","_r$revalidate5","p","label","url","revalidated","itemType","items","type","_client$items$list","item","btoa","stringify","attributes","environmentId","locale","previewLinks","_client$items$list2","entity_type","event_type","entity","relationships","item_type","data","updated_at","published_at","created_at","related_entities","statusText","withVercelCronAuthEdge","CRON_SECRET","withBackupEdge","params","URLSearchParams","nextUrl","searchParams","today","_temp3","_Buffer$from$toString","Accepts","_ref2","favicon","end","props","reader","_fetch","getReader","_interrupt","read","_ref3","done","write","notFound","opt","REVALIDATE_TIME","push","apply","seo","context","apiQuery","variables","_ref2$preview","setLink","batch","q","idx","vars","errorMessages","errors","_ref4","err","ping","DATOCMS_PREVIEW_SECRET","secret","slug","Location","setPreviewData","writeHead","payload","_entity$relationships","_entity$relationships2","_entity$relationships3","record","delay","now","Math","includes","path","withVercelCronAuth","_req$headers","generatePreviewUrl","SITE_URL","_path","baseUrl","URL","pathname","corsOptions"],"mappings":"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"}