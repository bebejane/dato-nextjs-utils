{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n  if (!GRAPHQL_API_TOKEN && !apiToken)\n    throw new Error('No graphql api token exists in .env')\n\n  try {\n    client.headers\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","JSON","parse","body","toString","undefined","requestName","queries","Array","isArray","map","op","operationName","join","response","t","Date","getTime","_extends","text","Promise","resolve","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","Authorization","headers","link","previewLink","ApolloClient","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","callback","req","res","authorization","basicAuth","status","send","auth","split","Buffer","from","pwd","BASIC_AUTH_USER","_Buffer$from$toString","BASIC_AUTH_PASSWORD","isAuthorized","opt","id","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","context","apiQuery","options","variables","_ref$preview","_ref","Error","client","setLink","batch","q","idx","length","vars","all","data","errorMessages","filter","errors","forEach","_ref3","message","err","props","withPreview","secret","DATOCMS_PREVIEW_SECRET","slug","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","_req$body","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","then","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated","_catch"],"mappings":"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"}