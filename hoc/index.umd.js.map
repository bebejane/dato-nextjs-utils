{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken:string = GRAPHQL_API_ENDPOINT) => {\n  return new BatchHttpLink({\n    ...linkConfig, \n    headers:{\n      'Authorization': `Bearer ${apiToken}`,\n      'X-Include-Drafts': preview,\n      'X-Exclude-Invalid': true\n    }\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_ENDPOINT)\nconst previewLink = createLink(true, GRAPHQL_API_ENDPOINT)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = { \n  variables?: any | any[], \n  preview?: boolean, \n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false, apiToken} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","operations","Array","isArray","map","op","operationName","join","then","response","t","Date","getTime","_extends","text","Promise","resolve","result","console","log","e","reject","batchMax","batchInterval","createLink","preview","apiToken","BatchHttpLink","headers","Authorization","previewLink","client","ApolloClient","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","context","options","variables","_ref$preview","Error","setLink","batch","q","idx","vars","length","all","data","filter","errors","_ref2","forEach","_ref3","message","errorMessages","res","_catch","err","apiQuery","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","id","buildClient","requestTimeout","itemTypes","list","models","model","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"0tBAOA,ICPAA,MDOcC,EAAqB,oBAALC,OACJC,EAAGC,QAAQC,IAAIF,sBAAwBC,QAAQC,IAAIC,gEACtDC,EAAGH,QAAQC,IAAIG,8BAoBtBC,EAAG,CACjBC,IAAKP,EACLQ,MAAmC,SAA5BP,QAAQC,IAAIO,qBApBOC,EAAoBC,GAA0C,IAExF,IAAaC,EAAGD,EAAOE,KAAKC,MAAMH,EAAKI,KAAKC,iBAAcC,EAEpDC,EAAiBC,IADJP,EAAUQ,MAAMC,QAAQT,GAAWA,EAAQU,IAAI,SAACC,GAAgCA,OAAAA,EAAGC,aAAa,GAAI,CAACZ,EAAQY,eAAiB,IAC/GC,KAAK,MAAO,uBACvBjB,MAAME,EAAOC,IAAKe,KAAA,SAAnCC,GACN,IAAOC,GAAG,IAAIC,MAAOC,UAErB,OAAAC,EAAA,CAAA,EACKJ,EACGK,CAAAA,KAAI,WAAA,IAAA,OAAAC,QAAAC,QACaP,EAASK,QAAxBG,KAAAA,SAAAA,GAEN,OADAC,QAAQC,IAAI,cAAqB,aAAcnB,EAAW,OAAS,IAAQW,MAAGC,UAAUF,GAAM,MACjFO,CAAA,EACd,CAAA,MAAAG,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,GACF,EACF,CAAA,MAAAA,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,OAI4DrB,EAC3DuB,SAAU,GACVC,cAAe,IAGXC,EAAa,SAACC,EAA0BC,GAC5C,gBADkBD,IAAAA,GAAmB,QAAOC,IAAAA,IAAAA,EAAkB5C,GACnD6C,IAAAA,EAAaA,mBACnBvC,EAAU,CACbwC,QAAQ,CACNC,cAAe,UAAYH,EAC3B,mBAAoBD,EACpB,qBAAqB,KAG3B,IAEaD,GAAW,EAAO1C,GACzBgD,EAAcN,GAAW,EAAM1C,GAExBiD,EAAS,IAAIC,EAAAA,aAAa,CACrCC,KAAAA,EACAC,MAAO,IAAmBC,gBAC1BC,QAASxD,EACTyD,eAAgB,CACdC,MAAO,CACLC,YAAaxD,QAAQC,IAAIwD,UAAY,cAAgB,WACrDC,YAAa,UC9BFC,EAAGC,EAAGA,IAuCtBhE,MAAA,CAAA,orBAAAA,wBA7DuBiE,SAAgBC,EAAWC,GAEjD,IAAgBC,EAAYC,SAASjE,QAAQC,IAAIiE,mBACZ,CAACP,GAStC,OAPGG,EAAIP,OACL5C,EAAQwD,KAAKL,EAAIP,OAChBO,EAAInD,SACLA,EAAQwD,KAAKC,MAAMzD,EAASmD,EAAInD,SAC/BmD,EAAIO,KACL1D,EAAQwD,OD6FAP,IADA,sBC5FcE,EAAIO,ID4Fe,uDC1F3C,SAAcC,GAAO,2BDmDF,SAAUf,EAAgDgB,GAA0B,IAEvG,IAAgDA,EAAAA,GAAW,CAAA,EAAnDC,EAAAA,EAAAA,cAAW9B,QAAAA,OAAO,IAAA+B,GAAU9B,EAAAA,IAAAA,SAEpC,GAAa,OAAVY,EACD,MAAUmB,IAAAA,MAAM,iCAElB,IAAIvE,EACF,MAAUuE,IAAAA,MAAM,uCAAsC,OAErD1C,QAAAC,gCAAA,WAEDe,EAAO2B,QAAQhC,EAAWF,EAAWC,EAASC,GAAYD,EAAUK,EAAcG,GAElF,IAAW0B,GAAIzD,MAAMC,QAAQmC,GAASA,EAAQ,CAACA,IAAQlC,IAAI,SAACwD,EAAGC,GAC7D,IAAUC,EAAG5D,MAAMC,QAAQoD,IAAcA,EAAUQ,OAASF,EAAK,EAAIN,EAAUM,GAAON,GAAa,GACnG,OAAaxB,EAACO,MAAM,CAACA,MAAMsB,EAAGL,UAAUO,GAC1C,GAAE,OAAA/C,QAAAC,QAEiBD,QAAQiD,IAAIL,IAAMnD,KAAA,SAA/ByD,GAEN,MAA+B,GAK/B,GAJAA,EAAKC,OAAO,YAAcC,OAANC,EAAND,MAAkB,GAAEE,QAAQ,SAAAC,GAAQA,EAANH,OACnC/D,IAAI,SAAAgB,UAAMA,EAACmD,OAAO,GAAEF,QAAQ,SAACE,UAAyBC,EAACtB,KAAKqB,EAAQ,EAC7E,GAEGC,EAAcT,OACf,UAAeN,MAACe,EAAcjE,KAAK,OAErC,IAAUU,EAAG,GAEb,OADAgD,EAAKI,QAAQ,SAACI,GAAG,OAAWxD,EAAAJ,EAAA,CAAA,EAAOI,QAAWwD,SAAAA,EAAKR,KAAK,IAC3C,EAEd,6DAvBES,CAAA,WAuBIC,GACL,MAAMA,CACP,GAGH,CAFC,MAEDvD,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,CCxFwBwD,CAASlF,EAAS,CAAC+B,QAAQ4B,EAAQ5B,WAAjDoD,KAAAA,SAAAA,GAEN,OAAG/B,EACYA,QAAAA,QAAAA,EAAS,CAACO,QAAAA,EAASwB,MAAWA,EAAAA,CAAAA,EAAAA,GAAQ9B,WAAAA,KAE5C,CAAE8B,MAAUA,EAAAA,CAAAA,EAAAA,GAAQxB,QAAAA,EAASN,WAAAA,EAAY,GACnD,mCACH,gBCvByC,SAAC+B,EAAsBL,GAAqB,IAEnF,GAAKK,EAAIxC,MAAMyC,SAAWhG,QAAQC,IAAIgG,yBAA2BF,EAAIxC,MAAM2C,KACzE,OAAAlE,QAAAC,QAAOyD,EAAIS,OAAO,KAAKC,KAAK,CAAEZ,QAAS,mBAEzC,IAAQU,EAASH,EAAIxC,MAAb2C,KAER,IACER,EAAIW,eAAe,CAAA,EAAI,CAACC,OAAQ,KAChCZ,EAAIa,UAAU,IAAK,CAAEC,SAAUN,GAAW,MAC1CR,EAAIe,KAIL,CAHA,MAAMb,GAEL,OADAzD,QAAQuE,MAAMd,GACd5D,QAAAC,QAAOyD,EAAIS,OAAO,KAAKC,KAAK,CAAEZ,QAAS,2BACxC,CAAA,OAAAxD,QAAAC,SACF,CAAA,MAAAI,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,mBCmBuB,SAAe0B,GAErC,OAAcgC,SAAAA,EAAqBL,GAAwB,IAAA,IAAAiB,EAEzD,IArCqB,SAACZ,GAExB,IAAea,EAAGb,EAAIlD,QAAQgE,cAC9B,IAAKD,EACH,OAAO,EAET,MAAaA,EAAUE,MAAM,KAAK,GACdC,EAAAA,OAAOC,KAAKC,EAAM,UAAUlG,WAAW+F,MAAM,KACjE,OADWI,EAAA,KACKlH,QAAQC,IAAIkH,iBADZD,EAAA,KACuClH,QAAQC,IAAImH,mBACrE,CA4BSR,CAAUb,GACb,uBAAOL,EAAIS,OAAO,KAAKkB,KAAK,kBAE9B,MAAgB,OAAAtB,EAAAA,EAAIjF,WAAJ,EAAA6F,EAAUW,OAE1B,IAAKC,EACH,KAAM,mBAAkB,OAELC,QAAAA,QAlCF,SAAUD,GAA+B,IAAA,IAAAE,EAAAC,EAAAC,EAExDC,QAAUL,GAAsB,SAAtBA,EAASM,uBAAaH,EAAtBD,EAAwBK,YAAxB,SAAAJ,EAAmCxC,aAAnCyC,EAAyCI,GAEzD,IAAKH,EACH,KAAM,iCAERzF,QAAQC,IAAI,kBAAmBwF,GAC/B,IAAY5E,EAAGgF,EAAWA,YAAC,CAAErF,SAAU3C,QAAQC,IAAIG,8BAA+B6H,eAAe,MAAO,OACnFjF,QAAAA,QAAAA,EAAOkF,UAAUC,QAAhCC,KAAAA,SAAAA,GACN,IAAWC,EAAGD,EAAOE,KAAK,SAAAC,GAAC,SAAMR,KAAOH,CAAO,GAAC,OAC1B5E,QAAAA,QAAAA,EAAOwF,MAAML,KAAK,CAAEhD,OAAQ,CAAEsD,KAAMJ,EAAMK,QAASC,OAAQ,CAAEZ,GAAI,CAAEa,GAAIrB,EAAQQ,SAAWtG,KAAA,SAA1GoH,GACN,IAAYC,EAAGD,EAAQ,GAEvB,IAAKC,EACH,KAAuClB,iCAAAA,EAGzC,OADAzF,QAAQC,IAAI,aAAciG,EAAMK,SACpBI,EAAAA,CAAAA,EAAAA,GAAQT,MAAAA,GAAO,EAE7B,GAAC,mCAcwBb,CAAkBD,IAAQ9F,KAAA,SAAzCqH,GAEN/E,EAAS+E,EAAeC,SAAAA,OACnB,OAAA/G,QAAAC,gCAAA,WACD,IAAK8G,EAAM/D,OACT,KAAM,wBAEgC,OAAxC7C,QAAQC,IAAI,qBAAsB2G,mBAC5B/G,QAAQiD,IAAI8D,EAAM1H,IAAI,SAAA2H,GAAC,OAAOtD,EAAC1B,WAAWgF,EAAE,KAClD7G,KAAAA,WACA,OADAA,QAAQC,IAAI,wBACDgE,KAAK,CAAE6C,aAAa,EAAMF,MAAAA,GAAQ,EAC9C,6DAREpD,CAAA,EAQF,SAAMC,GAEL,OADAzD,QAAQuE,MAAMd,KACHQ,KAAK,CAAE6C,aAAa,EAAOrD,IAAAA,GACvC,GAEF,CAAA,MAAAvD,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,EAAC,EAEN,CADG,MACHA,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,CAAA"}