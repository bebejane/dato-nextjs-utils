{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\n\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken:string = GRAPHQL_API_TOKEN) => {\n  return new BatchHttpLink({\n    ...linkConfig, \n    headers: preview ? {\n      'Authorization': `Bearer ${apiToken}`,\n      'X-Include-Drafts': true,\n      'X-Exclude-Invalid': true \n    } : {\n      'Authorization': `Bearer ${apiToken}`,\n      'X-Exclude-Invalid': true \n    }\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = { \n  variables?: any | any[], \n  preview?: boolean, \n  apiToken?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false, apiToken} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) =>{\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","t","e","Promise","reject","batchMax","batchInterval","createLink","preview","apiToken","BatchHttpLink","headers","Authorization","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","context","apiQuery","options","variables","_ref","_ref$preview","client","setLink","previewLink","batch","q","idx","vars","length","resolve","all","data","errorMessages","filter","_ref2","errors","forEach","_ref3","message","Error","res","_extends","err","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","id","buildClient","requestTimeout","itemTypes","list","models","model","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated","_catch"],"mappings":"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"}