{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withBasicAuth.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\";\nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN || process.env.GRAPHQL_API_TOKEN\nconst GRAPHQL_ENVIRONMENT = process.env.GRAPHQL_ENVIRONMENT\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response> => {\n\n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op: { operationName: string }) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text() {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime() - t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL === 'true' ? loggingFetch : undefined,\n  batchMax: 10,\n  batchInterval: 50\n}\n\nconst createLink = (preview: boolean = false, apiToken: string = GRAPHQL_API_TOKEN) => {\n  const headers = {\n    'Authorization': `Bearer ${apiToken}`,\n    'X-Exclude-Invalid': true\n  }\n\n  if (preview)\n    headers['X-Include-Drafts'] = true\n\n  if (GRAPHQL_ENVIRONMENT)\n    headers['X-Environment'] = GRAPHQL_ENVIRONMENT\n\n  return new BatchHttpLink({\n    ...linkConfig,\n    headers\n  })\n}\n\nconst link = createLink(false, GRAPHQL_API_TOKEN)\nconst previewLink = createLink(true, GRAPHQL_API_TOKEN)\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport type ApiQueryOptions = {\n  variables?: any | any[],\n  preview?: boolean,\n  apiToken?: string,\n  environment?: string\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options?: ApiQueryOptions): Promise<any> => {\n\n  const { variables, preview = false, apiToken } = options || {}\n\n  if (query === null)\n    throw new Error('Invalid query! Query is empty')\n\n\n  //if (!process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN && !process.env.GRAPHQL_API_TOKEN && !apiToken)\n  //throw new Error('No graphql api token exists in .env')\n\n  try {\n\n    client.setLink(apiToken ? createLink(preview, apiToken) : preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx - 1 ? variables[idx] : variables || {}\n      return client.query({ query: q, variables: vars })\n    })\n\n    const data = await Promise.all(batch)\n\n    const errorMessages: string[] = []\n    data.filter(({ errors }) => errors).forEach(({ errors }) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n\n    if (errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n\n    let result = {}\n    data.forEach((res) => result = { ...result, ...res?.data })\n    return result\n\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const SEOQuery = (model: string, id?: string): TypedDocumentNode => {\n  const q = `query GetSEO{\n    seo: ${model} ${id ? `( filter: { id: { eq: \"${id}\" } })` : ''} {\n      id \n      tags: _seoMetaTags {\n        attributes \n        content \n        tag\n      }\n    }\n  }`;\n  return gql(q) as TypedDocumentNode\n}\n\nexport const datoError = (err: Error) => {\n  console.error(err)\n  return err.message || err\n}\n","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any, callback: Function): GetStaticProps {\n\n  const revalidate: number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n\n  if (opt.query)\n    queries.push(opt.query)\n  if (opt.queries)\n    queries.push.apply(queries, opt.queries)\n  if (opt.seo)\n    queries.push(SEOQuery(opt.seo.model, opt.seo.id))\n\n  return async (context) => {\n    const props = await apiQuery(queries, { preview: context.preview });\n\n    if (callback)\n      return await callback({ context, props: { ...props }, revalidate });\n    else\n      return { props: { ...props }, context, revalidate };\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function withBasicAuth(callback: (req: NextApiRequest, res: NextApiResponse) => void): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    const basicAuth = req.headers.authorization\n    if (!basicAuth)\n      return res.status(401).send('Access denied')\n\n    const auth = basicAuth.split(' ')[1]\n    const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n    const isAuthorized = user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n\n    if (!isAuthorized)\n      return res.status(401).send('Access denied')\n\n    return callback(req, res)\n  }\n}\n\n\n","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req: NextApiRequest, res: NextApiResponse) {\n\n  if (req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n\n  const { slug } = req.query as { slug: string }\n\n  const Location = slug ? slug.startsWith('/') ? slug : `/${slug}` : '/'\n\n  try {\n    res.setPreviewData({}, { maxAge: 10 })\n    res.writeHead(307, { Location })\n    res.end()\n  } catch (err) {\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n\n  const basicAuth = req.headers.authorization\n  if (!basicAuth)\n    return true;\n\n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any): Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId)\n    throw 'Model id not found in payload!'\n\n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.GRAPHQL_API_TOKEN || process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout: 3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n\n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback: (record: any, revalidate: (paths: string[]) => Promise<void>) => Promise<void>): (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try {\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      } catch (err) {\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n\n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","process","env","GRAPHQL_API_ENDPOINT","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","GRAPHQL_ENVIRONMENT","linkConfig","uri","fetch","LOG_GRAPHQL","input","init","queries","JSON","parse","body","toString","undefined","requestName","Array","isArray","map","op","operationName","join","then","response","getTime","text","result","console","log","Date","t","e","Promise","reject","batchMax","batchInterval","preview","apiToken","headers","Authorization","BatchHttpLink","createLink","previewLink","client","ApolloClient","link","cache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","callback","req","res","authorization","basicAuth","resolve","status","send","auth","split","Buffer","from","pwd","BASIC_AUTH_USER","_Buffer$from$toString","BASIC_AUTH_PASSWORD","isAuthorized","opt","id","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","model","context","apiQuery","options","variables","_ref$preview","_ref","Error","setLink","q","idx","vars","length","all","batch","data","errorMessages","filter","_ref2","errors","forEach","message","_extends","_catch","err","props","withPreview","secret","DATOCMS_PREVIEW_SECRET","slug","json","Location","startsWith","setPreviewData","maxAge","writeHead","end","error","_req$body","payload","entity","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","buildClient","requestTimeout","itemTypes","list","models","find","m","items","type","api_key","fields","eq","records","record","paths","p","revalidated"],"mappings":"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"}