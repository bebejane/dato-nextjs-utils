{"version":3,"file":"index.umd.js","sources":["../src/api/index.ts","../src/hoc/withGlobalProps.ts","../src/hoc/withPreview.ts","../src/hoc/withRevalidate.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client/core/core.cjs';\nimport { BatchHttpLink } from \"@apollo/client/link/batch-http/batchHttpLink.js\"; \nimport { TypedDocumentNode } from '@apollo/client/core/types.js';\nimport { gql } from \"@apollo/client/core/core.cjs\";\n\nexport type ApiQueryOptions = { variables?: any | any[], preview?: boolean}\n\nconst isServer = typeof window === 'undefined';\nconst GRAPHQL_API_ENDPOINT = process.env.GRAPHQL_API_ENDPOINT || process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT || `https://graphql.datocms.com`;\nconst GRAPHQL_API_TOKEN = process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN\n\nconst loggingFetch = async (input: RequestInfo, init?: RequestInit): Promise<Response>  => {\n  \n  const queries = init ? JSON.parse(init.body.toString()) : undefined;\n  const operations = queries ? Array.isArray(queries) ? queries.map((op : {operationName:string}) => op.operationName) : [queries.operationName] : [];\n  const requestName = `${operations.join(', ')}`\n  const response = await fetch(input, init)\n  const t = new Date().getTime()\n\n  return {\n    ...response,\n    async text () {\n      const result = await response.text()\n      console.log(\"\\x1b[33m%s\\x1b[0m\", 'gql  ', `- ${requestName}`, `- ${new Date().getTime()-t}ms`)\n      return result\n    }\n  }\n}\n\nconst linkConfig = {\n  uri: GRAPHQL_API_ENDPOINT,\n  fetch: process.env.LOG_GRAPHQL ? loggingFetch : undefined,\n  batchMax: 10, \n  batchInterval: 50,\n  headers: { \n    'Authorization': `Bearer ${GRAPHQL_API_TOKEN}`\n  }\n}\n\nconst link = new BatchHttpLink(linkConfig)\nconst previewLink = new BatchHttpLink({...linkConfig, headers:{...linkConfig.headers, 'X-Include-Drafts': true}})\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  ssrMode: isServer,\n  defaultOptions: {\n    query: {\n      fetchPolicy: process.env.DEV_CACHE ? 'cache-first' : 'no-cache',\n      errorPolicy: 'all',\n    }\n  }\n});\n\nexport const SEOQuery = (schema: string) : TypedDocumentNode => {\n  const q = \"query GetSEO {seo: \" + schema + \" {id tags: _seoMetaTags {attributes content tag}}}\";\n  return gql(q) as TypedDocumentNode\n}\n\nexport const apiQuery = async (query: TypedDocumentNode | TypedDocumentNode[], options? : ApiQueryOptions) : Promise<any> => {\n  \n  const { variables, preview = false} = options || {}\n\n  if(query === null) \n    throw new Error('Invalid query! Query is empty')\n\n  if(!GRAPHQL_API_TOKEN) \n    throw new Error('No graphql api token exists in .env')\n  \n  try{\n    \n    client.setLink(preview ? previewLink : link)\n\n    const batch = (Array.isArray(query) ? query : [query]).map((q, idx) => {\n      const vars = Array.isArray(variables) && variables.length > idx -1 ? variables[idx] : variables || {}\n      return client.query({query:q, variables:vars})\n    })\n  \n    const data = await Promise.all(batch)\n    \n    const errorMessages:string[] = []\n    data.filter(({errors}) => errors).forEach(({errors}) => {\n      errors.map(e => e.message).forEach((message) => errorMessages.push(message))\n    })\n    \n    if(errorMessages.length)\n      throw new Error(errorMessages.join('. '))\n    \n    let result = {}\n    data.forEach((res) => result = {...result, ...res?.data})\n    return result\n\n  }catch(err){\n    throw err\n  }\n}","import { apiQuery, SEOQuery } from \"../api/index.js\";\nimport { GetStaticProps } from 'next'\nimport { gql } from \"@apollo/client/core/core.cjs\";\nimport type { TypedDocumentNode } from \"@apollo/client/core/types.js\";\n\nexport default function withGlobalProps(opt: any , callback : Function) : GetStaticProps {\n  \n  const revalidate : number = parseInt(process.env.REVALIDATE_TIME)\n  const queries: TypedDocumentNode[] = [GlobalQuery]\n  \n  if(opt.query) \n    queries.push(opt.query)\n  if(opt.queries) \n    queries.push.apply(queries, opt.queries)\n  if(opt.seo) \n    queries.push(SEOQuery(opt.seo))\n  \n  return async (context) => {\n    const props = await apiQuery(queries, {preview:context.preview});\n\n    if(callback)\n      return await callback({context, props: {...props}, revalidate});\n    else\n      return { props:{...props}, context, revalidate};\n  }\n}\n\nconst GlobalQuery = gql`\n  query Global {\n    site: _site {\n      favicon: faviconMetaTags {\n      attributes\n      content\n      tag\n    }\n    globalSeo {\n      facebookPageUrl\n      siteName\n      titleSuffix\n      twitterAccount\n      fallbackSeo {\n        description\n        title\n        twitterCard\n        image {\n          id\n          title\n          width\n          responsiveImage {\n            alt\n            aspectRatio\n            base64\n            bgColor\n            height\n            sizes\n            src\n            srcSet\n            webpSrcSet\n            title\n            width\n          }\n        }\n      }\n    }\n  }\n}\n`","import type { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function withPreview(req : NextApiRequest, res : NextApiResponse) {\n\n  if ( req.query.secret !== process.env.DATOCMS_PREVIEW_SECRET || !req.query.slug)\n    return res.status(401).json({ message: 'Invalid token' })\n  \n  const { slug } = req.query\n\n  try {\n    res.setPreviewData({}, {maxAge: 10})\n    res.writeHead(307, { Location: slug ? slug : `/` })\n    res.end()\n  }catch(err){\n    console.error(err)\n    return res.status(401).json({ message: 'Error previewing page!' })\n  }\n}","import type { NextApiRequest, NextApiResponse } from 'next'\nimport { buildClient } from '@datocms/cma-client';\n\nexport const basicAuth = (req: NextApiRequest) => {\n  \n  const basicAuth = req.headers.authorization\n  if (!basicAuth) \n    return true;\n    \n  const auth = basicAuth.split(' ')[1]\n  const [user, pwd] = Buffer.from(auth, 'base64').toString().split(':')\n  return user === process.env.BASIC_AUTH_USER && pwd === process.env.BASIC_AUTH_PASSWORD\n}\n\nconst recordFromPayload = async (payload: any) : Promise<any> => {\n\n  const modelId = payload?.relationships?.item_type?.data?.id\n\n  if (!modelId) \n    throw 'Model id not found in payload!'\n  \n  console.log('resolve modelId', modelId)\n  const client = buildClient({ apiToken: process.env.NEXT_PUBLIC_GRAPHQL_API_TOKEN, requestTimeout:3000 })\n  const models = await client.itemTypes.list()\n  const model = models.find(m => m.id === modelId)\n  const records = await client.items.list({ filter: { type: model.api_key, fields: { id: { eq: payload.id } } } })\n  const record = records[0]\n  \n  if (!record)\n    throw `No record found with modelId: ${modelId}`\n\n  console.log('revalidate', model.api_key)\n  return { ...record, model }\n\n}\n\nexport default function withRevalidate(callback:(record:any, revalidate : (paths:string[]) => Promise<void> ) => Promise<void>) : (req: NextApiRequest, res: NextApiResponse) => void {\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n\n    if (!basicAuth(req))\n      return res.status(401).send('Access denied')\n\n    const payload = req.body?.entity;\n\n    if (!payload)\n      throw 'Payload is empty'\n\n    const record = await recordFromPayload(payload)\n\n    callback(record, async (paths) => {\n      try{\n        if (!paths.length)\n          throw 'Nothing to revalidate';\n\n        console.log('revalidating paths', paths)\n        await Promise.all(paths.map(p => res.revalidate(p)))\n        console.log('revalidating done!')\n        return res.json({ revalidated: true, paths })\n      }catch(err){\n        console.error(err)\n        return res.json({ revalidated: false, err })\n      }\n      \n    })\n  }\n}\n\n\n"],"names":["_templateObject","isServer","window","GRAPHQL_API_ENDPOINT","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","GRAPHQL_API_TOKEN","NEXT_PUBLIC_GRAPHQL_API_TOKEN","linkConfig","uri","fetch","LOG_GRAPHQL","loggingFetch","input","init","queries","JSON","parse","body","toString","undefined","operations","Array","isArray","map","op","operationName","join","Promise","resolve","response","Date","getTime","_extends","text","result","console","log","requestName","t","e","reject","batchMax","batchInterval","headers","Authorization","BatchHttpLink","client","ApolloClient","link","cache","InMemoryCache","ssrMode","defaultOptions","query","fetchPolicy","DEV_CACHE","errorPolicy","GlobalQuery","gql","withGlobalProps","opt","callback","revalidate","parseInt","REVALIDATE_TIME","push","apply","seo","context","apiQuery","options","variables","preview","_ref$preview","Error","setLink","previewLink","batch","q","idx","vars","length","all","data","errorMessages","filter","_ref2","errors","forEach","_ref3","message","res","_catch","err","props","req","secret","DATOCMS_PREVIEW_SECRET","slug","status","json","setPreviewData","maxAge","writeHead","Location","end","error","_req$body","basicAuth","authorization","split","Buffer","from","auth","_Buffer$from$toString","BASIC_AUTH_USER","BASIC_AUTH_PASSWORD","send","entity","payload","recordFromPayload","_payload$relationship","_payload$relationship2","_payload$relationship3","modelId","relationships","item_type","id","buildClient","apiToken","requestTimeout","itemTypes","list","models","model","find","m","items","type","api_key","fields","eq","then","records","record","paths","p","revalidated"],"mappings":"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"}